<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Code Disciples - Python</title><link href="https://codedisciples.in/" rel="alternate"></link><link href="https://codedisciples.in/feeds/python.atom.xml" rel="self"></link><id>https://codedisciples.in/</id><updated>2019-08-22T12:00:00+05:30</updated><subtitle>A blog for all things code</subtitle><entry><title>A reminder app with Python, Twilio and AWS Lambda</title><link href="https://codedisciples.in/reminders.html" rel="alternate"></link><published>2019-08-22T12:00:00+05:30</published><updated>2019-08-22T12:00:00+05:30</updated><author><name>Abhishek Pednekar</name></author><id>tag:codedisciples.in,2019-08-22:/reminders.html</id><summary type="html">&lt;p&gt;Send reminders on WhatsApp with Python, Twilio and AWS Lambda&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, my wife and I missed the due date alert on a pretty important payment. This, despite having reminders set on our phones. Although we were able to sort it out without a lot of hassle, we knew that we couldn't afford a repeat of this scenario. Since an auto-payment (which I am not a big fan of anyways) wasn't an option here, additional alerting was the way to go. So as a true engineer, I decided to set up a custom alerting mechanism to which I would "hopefully" pay more attention. Since WhatsApp is pretty heavily used in my household, sending the reminder as a WhatsApp message to multiple phones seemed like a good idea. &lt;/p&gt;
&lt;p&gt;In this post, we will create a very simple Python (v3.7) script that calls the Twilio sandbox API to send an event reminder via WhatsApp. The reminder details and the list of recipients will be stored in separate json files. To run the script daily, we will be creating a function in AWS Lambda. &lt;/p&gt;
&lt;p&gt;The entire code is available in &lt;a href="https://github.com/AbhishekPednekar84/reminder_app_twilio_aws_lambda"&gt;this Github repository&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Twilio&lt;/h3&gt;
&lt;p&gt;Before we get to the code, we will need to create a &lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio&lt;/a&gt; account. The process is pretty straightforward. Once you are logged in, you will see an &lt;strong&gt;Account Security ID (SID)&lt;/strong&gt; and an &lt;strong&gt;Authentication Token&lt;/strong&gt; in your Twilio Console Dashboard. Those are key parameters that will be needed to send the WhatsApp message. We'll be using those later when working with AWS. &lt;/p&gt;
&lt;p&gt;To set up the sandbox, navigate to the All Products and Services console and click on WhatsApp. Twilio will then give you a sandbox number (that can be saved as a contact on your phone) and walk you through the setup which involves sending an &lt;strong&gt;activation code&lt;/strong&gt; to the sandbox number to enable messaging between your phone number and the sandbox. The short tutorial will also cover one-way and two-way messaging. Once you have sent the activation code from your phone to the sandbox number, you are all set to send and receive messages. If you would like other's to be able to communicate with the sandbox, the same activation code will need to be sent from their phones to the sandbox number. All the phone numbers that send the activation code will be listed as sandbox participants in your Twilio account.&lt;/p&gt;
&lt;p&gt;&lt;img alt="twilio1" src="https://codedisciples.in/images/index3/twilio1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="twilio1" src="https://codedisciples.in/images/index3/twilio2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;When you use the sandbox to send a random message to your number, a 24-hour messaging window is created between the sandbox and your number. To extend this window for whatever reason, you will need to send a message back to the sandbox within those 24 hours. Luckily, the sandbox provides three messaging templates that do not follow this 24-hour rule. Messages composed using these templates can be sent any number of times at varying frequencies. The template that we will be using is &lt;code&gt;Your {{1}} appointment is coming up on {{2}}&lt;/code&gt;. More on this in the next section.&lt;/p&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;p&gt;To work with Twilio using Python, we'll need to install the twilio library using &lt;code&gt;pip install twilio&lt;/code&gt;. But before that, let's create a &lt;a href="https://www.youtube.com/watch?v=APOPm01BVrk"&gt;virtual environment&lt;/a&gt;. This is optional but always a good practice to keep your project dependencies isolated. Alternately, you can &lt;code&gt;pip install&lt;/code&gt; from the &lt;em&gt;requirements.txt&lt;/em&gt; file in the repository - &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;. Next, let's create the two json files that I mentioned earlier.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reminder_events.json&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This file contains details such as the title of our reminder, it's frequency (monthly / yearly) and the due date. For monthly reminders, the due date will contain only the &lt;strong&gt;day&lt;/strong&gt; as the reminder will be triggered on the same day each month. For the yearly reminders, the due date is in the format &lt;em&gt;month-day&lt;/em&gt;. I did not have any weekly or quarterly events. Hence the subsequent code does not take those frequencies into consideration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;events&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Electricity Bill&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;due&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;17&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;frequency&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;M&amp;quot;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Car Insurance Premium&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;due&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;10-1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;frequency&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Y&amp;quot;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;directory.json&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This file contains all our recipient names and phone numbers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;members&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Recipient 1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;phone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;+919xxxxxxxxx&amp;quot;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Recipient 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;phone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;+919xxxxxxxxx&amp;quot;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;check_appointments()&lt;/em&gt; is our primary method which will look for events that are due. This will also be called by the AWS Lambda function. Lambda refers to this method as the &lt;em&gt;handler&lt;/em&gt;. The &lt;em&gt;event&lt;/em&gt; and &lt;em&gt;context&lt;/em&gt; parameters are specific to Lambda. &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/python-programming-model-handler-types.html"&gt;Click here&lt;/a&gt; for additional information.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio.rest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_appointments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This method reads the reminder_events.json file to determine if any of the monthly or annual reminders are due today. If yes, a call is made to the send_WhatsApp_message() method to send an event reminder to the recipients listed in directory.json&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, we extract the day and month from today's date. Additionally, we will format the date as &lt;em&gt;month, day&lt;/em&gt; (Ex: &lt;em&gt;August, 22&lt;/em&gt;). This is just a personal preference. Please refer to the &lt;a href="https://docs.python.org/3.7/library/datetime.html?highlight=datetime#strftime-and-strptime-behavior"&gt;docs&lt;/a&gt; in case you would like a different format.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;Extract&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;day&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;month&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;
    &lt;span class="n"&gt;current_day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="k"&gt;day&lt;/span&gt;
    &lt;span class="n"&gt;current_month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="k"&gt;month&lt;/span&gt;

    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Sent&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;Month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;Day&lt;/span&gt; &lt;span class="n"&gt;Ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;August&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
    &lt;span class="n"&gt;formatted_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;%B, %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="k"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;reminder_events.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;reminders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, our script will read the reminder_events.json file (using the &lt;a href="https://www.youtube.com/watch?v=9N6a-VLBa2I&amp;amp;t=543s"&gt;json&lt;/a&gt; library and a &lt;a href="https://www.youtube.com/watch?v=-aKFBoZpiqA"&gt;context manager&lt;/a&gt;) and iterate over its contents. In the &lt;code&gt;for&lt;/code&gt; loop, the code checks if the due date (day or month-day combination) matches the current day. If yes, we then make a call to the &lt;em&gt;send_whatsapp_message&lt;/em&gt; method to send the WhatsApp message. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    # &lt;span class="nv"&gt;Read&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;event&lt;/span&gt; &lt;span class="nv"&gt;reminders&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;reminders&lt;/span&gt;.&lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="nv"&gt;file&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;reminder&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;reminders&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;events&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;]:
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;reminder&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;frequency&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;] &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;M&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;reminder&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;due&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;] &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;str&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current_day&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
                &lt;span class="nv"&gt;send_whatsapp_message&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;reminder&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;title&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;], &lt;span class="nv"&gt;formatted_date&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;elif&lt;/span&gt; &lt;span class="nv"&gt;reminder&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;frequency&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;] &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Y&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:
            &lt;span class="nv"&gt;r_month&lt;/span&gt;, &lt;span class="nv"&gt;r_day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;reminder&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;due&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;].&lt;span class="nv"&gt;split&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;r_month&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;str&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current_month&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;r_day&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;str&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current_day&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
                &lt;span class="nv"&gt;send_whatsapp_message&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;reminder&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;title&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;], &lt;span class="nv"&gt;formatted_date&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;send_whatsapp_message&lt;/em&gt; takes the event name from the json file and the formatted date as parameters.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;send_whatsapp_message&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;event_name&lt;/span&gt;, &lt;span class="nv"&gt;event_date&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
    # &lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="nv"&gt;SID&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;TOKEN&lt;/span&gt; &lt;span class="nv"&gt;values&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="nv"&gt;be&lt;/span&gt; &lt;span class="nv"&gt;read&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;AWS&lt;/span&gt; &lt;span class="nv"&gt;Lambda&lt;/span&gt; &lt;span class="nv"&gt;Console&lt;/span&gt;
    &lt;span class="nv"&gt;account_sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;os&lt;/span&gt;.&lt;span class="nv"&gt;environ&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;account_sid&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;]
    &lt;span class="nv"&gt;auth_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;os&lt;/span&gt;.&lt;span class="nv"&gt;environ&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;auth_token&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;]

    # &lt;span class="nv"&gt;Create&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;Twilio&lt;/span&gt; &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="nv"&gt;object&lt;/span&gt;
    &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Client&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;account_sid&lt;/span&gt;, &lt;span class="nv"&gt;auth_token&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;

    &lt;span class="nv"&gt;event_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;10 AM ({event_name})&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

    # &lt;span class="nv"&gt;Read&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;recipient&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;directory&lt;/span&gt;.&lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="nv"&gt;file&lt;/span&gt;
    &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;open&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;directory.json&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;:
        &lt;span class="nv"&gt;recipients&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt;.&lt;span class="nv"&gt;load&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;recipient&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;recipients&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;members&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;]:
        &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;client&lt;/span&gt;.&lt;span class="nv"&gt;messages&lt;/span&gt;.&lt;span class="nv"&gt;create&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Your appointment is coming up on {event_date} at {event_name}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
            &lt;span class="nv"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;WhatsApp:+14155238886&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
            &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;WhatsApp:{recipient[&amp;#39;phone&amp;#39;]}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember the Twilio Account SID and the Authentication Token? We'll be adding them as environment variables in AWS in the next section. Right now, we will read the environment variable values into Python variables using &lt;code&gt;os.environ&lt;/code&gt;. Once we read the contents of &lt;em&gt;directory.json&lt;/em&gt;, we iterate over them and compose a message for each recipient.  +14155238886 is the sandbox number. Prefixing the &lt;strong&gt;whatsapp:&lt;/strong&gt; is required for both the sender and the recipient numbers. &lt;/p&gt;
&lt;p&gt;Finally, the body of the message uses the template I mentioned earlier. In this pre-provisioned sandbox template, we only have the freedom to modify the values of the &lt;em&gt;event_name&lt;/em&gt; and &lt;em&gt;event_date&lt;/em&gt;. Although both are being passed as arguments to the method, I am modifying event name as &lt;em&gt;10 AM ({event_name})&lt;/em&gt; just to make the message grammatically correct. So if I am being reminded about an electricity bill payment on August 31st, the message would read as &lt;code&gt;Your appointment is coming up on August, 31 at 10 AM (Electricity Bill)&lt;/code&gt;. 10 AM is just a random time that I chose since my script will be running at around 10 AM local time. The message can, however, be modified in any way that one chooses as long as we stay true to the template.&lt;/p&gt;
&lt;h3&gt;AWS Lambda&lt;/h3&gt;
&lt;p&gt;Now that we have our Python script and our Twilio sandbox ready to go, let's schedule the script in AWS Lambda. Sign up for the &lt;a href="https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;amp;all-free-tier.sort-order=asc"&gt;AWS Free Tier&lt;/a&gt;. In the AWS Management Console, look for Lambda.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="lambda1" src="https://codedisciples.in/images/index3/lambda1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;On the following page, you will see an option to create a Lambda function. The free tier for Lambda offers 1M free requests per month. So its a great platform to run simple scripts like this. &lt;/p&gt;
&lt;p&gt;Give your function a name and select the runtime as Python 3.7&lt;/p&gt;
&lt;p&gt;&lt;img alt="lambda1" src="https://codedisciples.in/images/index3/lambda2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;On the configuration page, set the code entry type as Upload zip file. Next, set the two environment variables for the Account SID and the Authentication Token. Change the Handler to &lt;code&gt;module_name.function_name&lt;/code&gt;. In this case, all our code is in the &lt;em&gt;reminders.py&lt;/em&gt; file and we require the Lambda function to call the &lt;em&gt;check_appointments()&lt;/em&gt; method. So, the handler will be &lt;code&gt;reminders.check_appointments&lt;/code&gt;. I also set the timeout to 10 seconds from the default 3 seconds under Basic Settings. The script however, takes less than three seconds to complete, making this step optional.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Creating the zip file&lt;/strong&gt; - copy reminders.py and the two json files to the &lt;em&gt;site-packages&lt;/em&gt; directory. Since I used a virtual environment, the path on my laptop is &lt;code&gt;&amp;lt;Project_folder&amp;gt;/venv/Lib/site-packages&lt;/code&gt;. Now, select all the contents of your site-packages directory and zip them. Please &lt;u&gt;do not&lt;/u&gt; zip the site-packages directory itself, just the contents. Zipping the directory will result in a &lt;em&gt;Module not found&lt;/em&gt; error when running the Lambda function. Give an appropriate name to the zip file and add it to the configuration.&lt;/p&gt;
&lt;p&gt;&lt;img alt="lambda1" src="https://codedisciples.in/images/index3/lambda3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Next, add a trigger to set up our &lt;strong&gt;cron&lt;/strong&gt; job. &lt;/p&gt;
&lt;p&gt;&lt;img alt="lambda1" src="https://codedisciples.in/images/index3/lambda4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In the Trigger configuration, select &lt;em&gt;CloudWatch Events&lt;/em&gt;. Create a new rule with an appropriate name, specify the Rule Type as Schedule Expression and provide a cron expression. If you are new to cron, here's a link to the &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html?source=post_page---------------------------#CronExpressions"&gt;AWS cron documentation&lt;/a&gt;. The time zone specified in the cron expression on Lambda is UTC by default. So `cron(30 4 * &lt;em&gt; ? &lt;/em&gt;)' will execute our script at 4:30 AM UTC every day which is 10 AM local time for me. Make sure that the trigger is enabled and add it to the configuration. &lt;/p&gt;
&lt;p&gt;&lt;img alt="lambda1" src="https://codedisciples.in/images/index3/lambda5.jpg"&gt;&lt;/p&gt;
&lt;p&gt;If added successfully, you will see a new CloudWatch Event added to your function configuration.&lt;/p&gt;
&lt;p&gt;&lt;img alt="lambda1" src="https://codedisciples.in/images/index3/lambda6.jpg"&gt;&lt;/p&gt;
&lt;p&gt;That's it! Now, whenever the script runs and finds an event that is due on the current day, it will send a WhatsApp message to your number.&lt;/p&gt;
&lt;p&gt;&lt;img alt="lambda1" src="https://codedisciples.in/images/index3/WhatsApp-final.jpg"&gt;&lt;/p&gt;</content><category term="Python"></category><category term="AWS"></category></entry><entry><title>Embedding Jupyter Notebooks in a website</title><link href="https://codedisciples.in/embedding-jupyter.html" rel="alternate"></link><published>2019-08-19T12:00:00+05:30</published><updated>2019-08-19T12:00:00+05:30</updated><author><name>Abhishek Pednekar</name></author><id>tag:codedisciples.in,2019-08-19:/embedding-jupyter.html</id><summary type="html">&lt;p&gt;Embed Jupyter Notebooks in your website using Github and NBInteract&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post, we will learn how to embed &lt;strong&gt;Jupyter Notebooks&lt;/strong&gt; in a website. The great thing about being able to embed notebooks is that either all or a subset of the notebook content, whether static or interactive can be made available directly on a website or a blog post. This is especially helpful for static sites (like &lt;strong&gt;&lt;a href="https://codedesiples.in"&gt;Code Disciples&lt;/a&gt;&lt;/strong&gt;) since the content can be added directly to the &lt;strong&gt;Markdown&lt;/strong&gt;. Readers do not need to navigate to a notebook server or a repository to explicitly view the notebook.&lt;/p&gt;
&lt;p&gt;To start off, we will create a &lt;strong&gt;&lt;a href="https://gist.github.com/"&gt;Github Gist&lt;/a&gt;&lt;/strong&gt; by uploading a &lt;strong&gt;Jupyter Notebook (.ipynb file)&lt;/strong&gt;. To keep it simple, we will be using a notebook containing some Math formulae in &lt;strong&gt;Markdown&lt;/strong&gt;. We can use a repository instead of a Gist. However, since we are dealing with just a few lines of Markdown, a Gist seems more appropriate. &lt;/p&gt;
&lt;p&gt;Once our gist is in place, we will be using a tool called &lt;em&gt;NBInteract&lt;/em&gt; to generate an &lt;strong&gt;html&lt;/strong&gt; file corresponding to our notebook. After a few modifications to the html file, we will embed the content to this blog post using an &lt;strong&gt;iframe&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Now, while I agree that there might be other ways to achieve the same results, this is what I have found to best suit my needs. So let's get started.&lt;/p&gt;
&lt;h3&gt;Creating the Gist&lt;/h3&gt;
&lt;p&gt;To create a gist, one needs to have a &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; account. Assuming you already have one, click on the &lt;em&gt;New Gist&lt;/em&gt; option on the top right of the page. &lt;/p&gt;
&lt;p&gt;Before we proceed, we will need a Jupyter Notebook to work with. The one used for this blog is available in this &lt;em&gt;&lt;a href="https://github.com/AbhishekPednekar84/codedisciples-blog-posts/tree/master/Index_2-markdown-cheat-sheet"&gt;Github repository&lt;/a&gt;&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;On the gist creation page, we will need to add a description and the notebook filename with the extension (.ipynb). To add the contents, we can simply drag and drop our notebook to the page. If there are any dependencies (third-party packages) that are needed in order for the code in our notebook to run, we will need to add those as well. Dependencies if any, will need to be added to either &lt;em&gt;requirements.txt&lt;/em&gt; (pypi) or &lt;em&gt;environment.yml&lt;/em&gt; (Conda / pypi) files. These files will also need to be added to the gist by clicking on the &lt;strong&gt;Add file&lt;/strong&gt; button. Finally, to create the gist click either of the &lt;strong&gt;Create gist&lt;/strong&gt; buttons. I will be creating a public gist.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gist" src="https://codedisciples.in/images/index2/gist.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Creating the iframe&lt;/h3&gt;
&lt;p&gt;To create our iframe that will eventually be embedded into the blog, we will first convert our Jupyter Notebook into an html file. This will be achieved via a third-party package called &lt;em&gt;&lt;a href="https://www.nbinteract.com/"&gt;nbinteract&lt;/a&gt;&lt;/em&gt;. So let's first create a &lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=APOPm01BVrk"&gt;virtual environment&lt;/a&gt;&lt;/em&gt; in the directory containing our notebook. &lt;/p&gt;
&lt;p&gt;Once the virtual environment is activated, let us run the &lt;code&gt;pip install nbinteract&lt;/code&gt; command to install the library.&lt;/p&gt;
&lt;p&gt;nbinteract is a command-line application (CLI). In order to use it, first navigate to the directory containing the .ipynb file and then run the below command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;nbinteract&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;notebook_filename&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipynb&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GitHub_Username&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Gist_ID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="NBInteract" src="https://codedisciples.in/images/index2/nbinteract.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This will create an html file with the same name as your Jupyter Notebook. Now before creating the iframe, we will need to make a couple of changes to the &lt;strong&gt;html&lt;/strong&gt; file.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the embedded JavaScript at the end of the file, change the provider from &lt;em&gt;gh&lt;/em&gt; to &lt;em&gt;gist&lt;/em&gt;. No change will be needed if you are using a GitHub Repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nv"&gt;Loads&lt;/span&gt; &lt;span class="nv"&gt;nbinteract&lt;/span&gt; &lt;span class="nv"&gt;package&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;script&lt;/span&gt; &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;https://unpkg.com/nbinteract-core&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;async&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nv"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;function&lt;/span&gt; &lt;span class="nv"&gt;setupNbinteract&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt; {
      &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="nv"&gt;NbInteract&lt;/span&gt; &lt;span class="nv"&gt;hasn&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;t loaded, wait one second and try again&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;window&lt;/span&gt;.&lt;span class="nv"&gt;NbInteract&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nv"&gt;undefined&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; {
        &lt;span class="nv"&gt;setTimeout&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;setupNbinteract&lt;/span&gt;, &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
      }

      &lt;span class="nv"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;interact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;window&lt;/span&gt;.&lt;span class="nv"&gt;NbInteract&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;{
        &lt;span class="nv"&gt;spec&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;GitHub_Username&amp;gt;/&amp;lt;Gist_ID&amp;gt;/master&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,
        &lt;span class="nv"&gt;baseUrl&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;https://mybinder.org&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;provider&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;gh&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,
        &lt;span class="nv"&gt;provider&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;gist&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,
      }&lt;span class="ss"&gt;)&lt;/span&gt;
      &lt;span class="nv"&gt;interact&lt;/span&gt;.&lt;span class="nv"&gt;prepare&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;

      &lt;span class="nv"&gt;window&lt;/span&gt;.&lt;span class="nv"&gt;interact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;interact&lt;/span&gt;
    }&lt;span class="ss"&gt;)()&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nv"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;nbinteract inserts a whole bunch of &lt;strong&gt;Bootstrap&lt;/strong&gt; and &lt;strong&gt;Font Awesome CSS&lt;/strong&gt; in the file. So keep as much or as little of it as you need.&lt;/li&gt;
&lt;li&gt;If you would like only a subset of your notebook to be visible on the website, you can delete the unwanted cells by removing the corresponding div tags form the html file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, to exclude this cell,&lt;/p&gt;
&lt;p&gt;&lt;img alt="delete-nb" src="https://codedisciples.in/images/index2/delete-nb.jpg"&gt;&lt;/p&gt;
&lt;p&gt;remove this block from the html file&lt;/p&gt;
&lt;p&gt;&lt;img alt="delete-html" src="https://codedisciples.in/images/index2/delete-html.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Now, let's embed an iframe tag in our blog, linking to the html file. I will be adding the below iframe tag directly to the Markdown corresponding to this blog. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://codedisciples.in/Index_2-Embed_Jupyter.html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just like in a Jupyter notebook, you can view the underlying code (Markdown in our case) by right-clicking on any of the formulae and viewing the plain text source. &lt;/p&gt;
&lt;iframe style="height: 500px" src="https://codedisciples.in/Index_2-Embed_Jupyter.html"&gt;&lt;/iframe&gt;

&lt;p&gt;In conclusion, I would like to say that the best use case for embedding a notebook is interactive content. If your notebook contains plots which have interactive IPython widgets, those can be embedded into your blog. Users can then interact with the plot on the website using the widgets. Some great examples have been provided in the NBInteract documentation. &lt;/p&gt;</content><category term="Python"></category><category term="Jupyter"></category></entry><entry><title>Pre-commit hooks for Python code</title><link href="https://codedisciples.in/pre-commit.html" rel="alternate"></link><published>2019-08-12T12:00:00+05:30</published><updated>2019-08-12T12:00:00+05:30</updated><author><name>Abhishek Pednekar</name></author><id>tag:codedisciples.in,2019-08-12:/pre-commit.html</id><summary type="html">&lt;p&gt;Using &lt;em&gt;black&lt;/em&gt; and &lt;em&gt;flake-8&lt;/em&gt; as pre-commit hooks in Python for code formatting and complying to PEP8 norms respectively&lt;/p&gt;</summary><content type="html">&lt;p&gt;Code reviews are great. But at the same time, they can be frustrating if the code being reviewed is not formatted uniformly. This is a common scenario in large teams wherein multiple developers are working on the same feature branch or code base. More hours spent on fixing the formatting also results in loss of productive time which could be used to further improve code logic. Also, none of us like being that super nitpicky team member who comments on a trailing whitespace or the fact that one string has single quotes while another is enclosed within double quotes. &lt;/p&gt;
&lt;p&gt;Luckily, &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;pre-commit&lt;/a&gt; hooks exist to alleviate these concerns by eliminating the need to manually review formatting and &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt; checks. A pre-commit hook is a short script that runs before committing our code. The script can be a means to check the code formatting or its compliance to PEP8. If the script runs successfully, the code is committed to source control, else the commit is unsuccessful.&lt;/p&gt;
&lt;p&gt;In this post, we’ll take a look at two popular Python libraries and how we can add them to a pre-commit hook. Please note that I am using a &lt;strong&gt;Windows&lt;/strong&gt; laptop for this demo. The same commands should work on &lt;strong&gt;macOS&lt;/strong&gt; as well.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://black.readthedocs.io/en/stable/"&gt;black&lt;/a&gt;&lt;/em&gt; - a code formatter&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="http://flake8.pycqa.org/en/latest/"&gt;flake8&lt;/a&gt;&lt;/em&gt; - a PEP8 compliance checker&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Please refer to this &lt;a href="https://github.com/AbhishekPednekar84/codedisciples-blog-posts/tree/master/Index_1-pre-commit-hooks"&gt;Github repository&lt;/a&gt; for the complete code.&lt;/p&gt;
&lt;h3&gt;Pre-commit framework&lt;/h3&gt;
&lt;p&gt;Creating a pre-commit hook is made really simple by this &lt;a href="https://github.com/pre-commit"&gt;pre-commit framework&lt;/a&gt; written in Python. To incorporate &lt;em&gt;pre-commit&lt;/em&gt; into a project, one needs to follow these steps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a &lt;a href="https://www.youtube.com/watch?v=APOPm01BVrk"&gt;virtual environment&lt;/a&gt; (optional but recommended)&lt;/li&gt;
&lt;li&gt;Install the pre-commit library: &lt;code&gt;pip install pre-commit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add the hooks (&lt;em&gt;black&lt;/em&gt; and &lt;em&gt;flake8&lt;/em&gt; in our case) to the &lt;em&gt;.pre-commit-config.yaml&lt;/em&gt; file &lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;pre-commit install&lt;/code&gt; command to install the hook in the &lt;em&gt;.git/&lt;/em&gt; directory&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is what our &lt;em&gt;.pre-commit-config.yaml&lt;/em&gt; file will look like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;   &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ambv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;
    &lt;span class="n"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;stable&lt;/span&gt;
    &lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;black&lt;/span&gt;
      &lt;span class="n"&gt;language_version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;   &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;hooks&lt;/span&gt;
    &lt;span class="n"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flake8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;pre-commit&lt;/em&gt; framework that we installed (step 2) includes &lt;em&gt;flake8&lt;/em&gt;. Hence all we need to specify is it's id. For &lt;em&gt;black&lt;/em&gt; however, we need to specify the exact path from where it needs to be sourced.&lt;/p&gt;
&lt;p&gt;In the following sections, we'll take a look at these libraries in detail.&lt;/p&gt;
&lt;h3&gt;Code formatter - &lt;em&gt;black&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;black&lt;/em&gt; is an uncompromisingly opinionated code formatter. It has been implemented with certain design decisions that are applied to the code being formatted. By adopting &lt;em&gt;black&lt;/em&gt; into your project, you are essentially letting the library take all the code formatting decisions for you. Therefore, please read through the &lt;a href="https://black.readthedocs.io/en/stable/"&gt;documentation&lt;/a&gt; to understand what the design decisions are. Below are some of the notable one's. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The number of characters per line are 88 (as opposed to 79 defined in PEP8)&lt;/li&gt;
&lt;li&gt;Strings are always enclosed in double quotes&lt;/li&gt;
&lt;li&gt;A trailing comma is added to comma separated elements&lt;/li&gt;
&lt;li&gt;For functions with multiple arguments, each argument is wrapped per line &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If any of these decisions are not acceptable to your formatting guidelines, &lt;em&gt;autopep8&lt;/em&gt; is a good alternative. Also, this is part of the &lt;em&gt;pre-commit&lt;/em&gt; framework like &lt;em&gt;flake8&lt;/em&gt;.   &lt;/p&gt;
&lt;p&gt;To use &lt;em&gt;black&lt;/em&gt;, we will need to include a &lt;em&gt;pyproject.toml&lt;/em&gt; file in our project folder. This file contains details of file types that are included and excluded during formatting. More importantly, if you would like to change the number of characters per line, just modify the &lt;code&gt;line-length&lt;/code&gt; attribute in the TOML file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[tool.black]&lt;/span&gt;
&lt;span class="c1"&gt;# Changed line-length to 80 from the default 88&lt;/span&gt;
&lt;span class="na"&gt;line-length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;80 &lt;/span&gt;
&lt;span class="na"&gt;include&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;\.pyi?$&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;exclude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;/(&lt;/span&gt;
    &lt;span class="na"&gt;\.git&lt;/span&gt;
  &lt;span class="na"&gt;| \.hg&lt;/span&gt;
  &lt;span class="na"&gt;| \.mypy_cache&lt;/span&gt;
  &lt;span class="na"&gt;| \.tox&lt;/span&gt;
  &lt;span class="na"&gt;| \.venv&lt;/span&gt;
  &lt;span class="na"&gt;| _build&lt;/span&gt;
  &lt;span class="na"&gt;| buck-out&lt;/span&gt;
  &lt;span class="na"&gt;| build&lt;/span&gt;
  &lt;span class="na"&gt;| dist&lt;/span&gt;
&lt;span class="na"&gt;)/&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;PEP8 checker - &lt;em&gt;flake8&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;flake8&lt;/em&gt; is a great library that verifies our code's compliance with PEP8. In order for &lt;em&gt;black&lt;/em&gt; to function smoothly with &lt;em&gt;flake8&lt;/em&gt;, we need to specify some &lt;a href="https://flake8.pycqa.org/en/latest/user/error-codes.html"&gt;error codes&lt;/a&gt; in the &lt;em&gt;flake8&lt;/em&gt; configuration file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[flake8]&lt;/span&gt;
&lt;span class="na"&gt;ignore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;E203, E266, E501&lt;/span&gt;
&lt;span class="na"&gt;max-line-length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;80&lt;/span&gt;
&lt;span class="na"&gt;max-complexity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;10&lt;/span&gt;
&lt;span class="na"&gt;select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;B,C,E,F,W,T4,B9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To go over this file very quickly, in the first line, we are specifying the error codes that we would like &lt;em&gt;flake8&lt;/em&gt; to ignore. The &lt;code&gt;max-line-length&lt;/code&gt; has been set to 80 to match our &lt;em&gt;black&lt;/em&gt; configuration values. &lt;code&gt;max-complexity&lt;/code&gt; defines the &lt;a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;McCabe complexity&lt;/a&gt; of a function. This is deactivated by default. The &lt;code&gt;select&lt;/code&gt; attribute enables errors and warnings which are turned off by default.&lt;/p&gt;
&lt;p&gt;That's it, with all this in place, we are ready to run the hook on our code. &lt;/p&gt;
&lt;p&gt;Here's some rather sloppily formatted code. Notice that there is no space prior to the equal to (=) operator. One element of the list uses double quotes while the rest are enclosed within single quotes and there is only one blank line prior to and after the function definition. There is also an additional whitespace on line 1 at the end of the (''') quotes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Unformatted-Code" src="https://codedisciples.in/images/Unformatted_Code.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Let's create and run or hook on this code. As indicated earlier, once we &lt;code&gt;pip install&lt;/code&gt; the &lt;em&gt;pre-commit&lt;/em&gt; library, we need to install it using the &lt;code&gt;pre-commit install&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pre-Commit" src="https://codedisciples.in/images/Pre-Commit.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Now, when we run our &lt;code&gt;git commit&lt;/code&gt;, we see that &lt;em&gt;black&lt;/em&gt; fails the commit but auto-formats the file. &lt;em&gt;flake8&lt;/em&gt; fails the commit due to the whitespace on line 1. This whitespace needs to be removed manually before our next &lt;code&gt;git commit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Initial-Commit" src="https://codedisciples.in/images/Initial_Commit.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Here's what our code looks like after all the formatting and the whitespace correction. Note that the list elements are now wrapped on separate lines. The spacing around the operators and the function definition is uniform. Also, all our strings are now enclosed within double quotes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Formatted-Code" src="https://codedisciples.in/images/Formatted_Code.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Let's go ahead and commit this. If all is good, both our hooks should pass followed by a successful &lt;code&gt;git commit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Final-Commit" src="https://codedisciples.in/images/Final_Commit.jpg"&gt;&lt;/p&gt;</content><category term="Python"></category></entry></feed>