<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Code Disciples - Docker</title><link href="https://codedisciples.in/" rel="alternate"></link><link href="https://codedisciples.in/feeds/docker.atom.xml" rel="self"></link><id>https://codedisciples.in/</id><updated>2019-09-18T23:00:00+05:30</updated><subtitle>A blog for all things code</subtitle><entry><title>Running PostgreSQL in a docker Container</title><link href="https://codedisciples.in/docker-postgres.html" rel="alternate"></link><published>2019-09-18T23:00:00+05:30</published><updated>2019-09-18T23:00:00+05:30</updated><author><name>Abhishek Pednekar</name></author><id>tag:codedisciples.in,2019-09-18:/docker-postgres.html</id><summary type="html">&lt;p&gt;Running PostgreSQL and pgAdmin 4 in docker containers&lt;/p&gt;</summary><content type="html">&lt;p&gt;Containers have revolutionized the way software is built and shipped. They also provide a means wherein software no longer needs to be mandatorily installed since it can be directly run in the container. In this post, you will run &lt;strong&gt;PostgreSQL&lt;/strong&gt; (postgres) and &lt;strong&gt;pgAdmin 4&lt;/strong&gt; in separate docker containers on a &lt;strong&gt;Windows&lt;/strong&gt; machine using docker toolbox. Once both docker containers are up, you will use pgAdmin to connect to the postgres database.&lt;/p&gt;
&lt;p&gt;This post assumes that the reader has &lt;code&gt;docker&lt;/code&gt; installed and running on a Windows machine. Installation instructions can be found in the &lt;a href="https://docs.docker.com/toolbox/toolbox_install_windows/"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt; is a free and open-source relational database management system&lt;br/&gt;
&lt;strong&gt;pgAdmin 4&lt;/strong&gt; is an open-source database management tool for postgres&lt;/p&gt;
&lt;h2&gt;Creating the docker containers&lt;/h2&gt;
&lt;p&gt;To create the postgres and pgAdmin docker containers, we will use a &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;3.2&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;postgres&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;image&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;postgres&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;5432:5432&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;container_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;postgres&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;POSTGRES_USER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;postgres&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;postgres-pass&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;POSTGRES_DB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;postgres&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nl"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;pgAdmin4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;image&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dpage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pgAdmin4&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;container_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pgAdmin4&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;depends_on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;postgres&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;8080:80&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;pgAdmin_DEFAULT_EMAIL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin@pgAdmin.com&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;pgAdmin_DEFAULT_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pgAdmin-pass&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's go over the attributes in the file.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;version&lt;/code&gt; is the version of the Compose file format&lt;br/&gt;
&lt;code&gt;services&lt;/code&gt; provides configuration for the containers that will be started&lt;br/&gt;
&lt;code&gt;image&lt;/code&gt; is the application image installed from &lt;a href="https://hub.docker.com/"&gt;Docker Hub&lt;/a&gt;&lt;br/&gt;
&lt;code&gt;ports&lt;/code&gt; are the exposed host and container ports&lt;br/&gt;
&lt;code&gt;environment&lt;/code&gt; contains the environment variables for the services defined in the &lt;code&gt;yaml&lt;/code&gt; file&lt;br/&gt;
&lt;code&gt;volume&lt;/code&gt; signifies the location of the persistent data stored in the container&lt;/p&gt;
&lt;p&gt;To create the containers, you will need to run the &lt;code&gt;docker-compose -f docker-compose.yml up&lt;/code&gt; command. To verify if the docker containers are running, you can use the &lt;code&gt;docker container ls&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="docker1" src="https://codedisciples.in/images/index9/docker1.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Running pgAdmin 4&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;docker-compose.yml&lt;/code&gt; file specifies &lt;code&gt;8080&lt;/code&gt; as the port to run pgAdmin. However, since docker is running on Windows, pgAdmin cannot be accessed using &lt;code&gt;http://localhost:8080&lt;/code&gt;. Instead, you will need to use the ip address of the virtual machine that is running docker toolbox. To get the ip address, you can run the &lt;code&gt;docker-machine ls&lt;/code&gt; command. The ip address, in this case, is &lt;code&gt;192.168.99.101&lt;/code&gt;. Therefore the url for pgAdmin will be &lt;code&gt;http://192.168.99.101:8080&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To log in, you will use the default email and password specified in the &lt;code&gt;yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="pgAdmin1" src="https://codedisciples.in/images/index9/pgAdmin1.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Connecting to a postgres database&lt;/h2&gt;
&lt;p&gt;Once logged into pgAdmin, you will select the &lt;strong&gt;Add New Server&lt;/strong&gt; option to connect to the postgres database.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="postgres1" src="https://codedisciples.in/images/index9/postgres1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
The database name, username and the password will be as specified in the &lt;code&gt;yaml&lt;/code&gt; file. The hostname will once again be the ip address of the virtual machine.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="postgres2" src="https://codedisciples.in/images/index9/postgres2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="postgres3" src="https://codedisciples.in/images/index9/postgres3.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Creating database objects with psql&lt;/h2&gt;
&lt;p&gt;To create database objects, we can either use pgAdmin or the &lt;code&gt;psql&lt;/code&gt; command line. To run &lt;code&gt;psql&lt;/code&gt;, you will first need to run a &lt;code&gt;bash&lt;/code&gt; shell in the container, then connect to our database and finally run our SQL statements. As an example, here is how you can create a new table.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="psql" src="https://codedisciples.in/images/index9/psql.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="postgres4" src="https://codedisciples.in/images/index9/postgres4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
Here is a link to official postgres &lt;a href="https://www.postgresql.org/docs/11/tutorial.html"&gt;tutorial&lt;/a&gt;.&lt;/p&gt;</content><category term="Docker"></category><category term="Postgres"></category></entry><entry><title>Bind Mounting with Docker Toolbox on Windows</title><link href="https://codedisciples.in/docker-bind-mounts.html" rel="alternate"></link><published>2019-09-18T14:00:00+05:30</published><updated>2019-09-18T14:00:00+05:30</updated><author><name>Abhishek Pednekar</name></author><id>tag:codedisciples.in,2019-09-18:/docker-bind-mounts.html</id><summary type="html">&lt;p&gt;Creating containers with bind mounting using Docker Toolbox on Windows&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you have racked your brains trying to get Docker bind mounting to work on Windows, you certainly are not alone. Documentation for Docker on Windows is not exactly verbose, especially if you are using the Docker Toolbox. In this post, we will look at binding a local Windows folder to a directory in a Docker Container using Docker Toolbox. In the example below, we will create an &lt;em&gt;nginx&lt;/em&gt; container with a bind to a local folder in "C:\Users". We will test the bind by copying over files from the local folder to the container.&lt;/p&gt;
&lt;p&gt;An important thing to note on Windows is to use &lt;code&gt;//&amp;lt;drive letter&amp;gt;/&lt;/code&gt; to reference our local drive in the &lt;code&gt;docker container run&lt;/code&gt; command. For instance, to reference "C:\Users", we will use "//c/users".  &lt;/p&gt;
&lt;p&gt;Next, we will add a shared folder on our virtual machine (VM). In this example, &lt;strong&gt;Oracle VirtualBox&lt;/strong&gt; provides the VM to run Docker Toolbox. We can add a shared folder in the &lt;em&gt;Settings&lt;/em&gt; of our VM.  &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="vm1" src="https://codedisciples.in/images/index8/vm1.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
To add a shared folder, we will select the &lt;em&gt;Shared Folders&lt;/em&gt; option. We will then need to specify the desired folder on our computer and give it an appropriate name. This name will be used in the &lt;code&gt;docker container run&lt;/code&gt; command. So in the example below, by including "//c/Docker" in our command, we are simply referring to "C:\users\abhi_\Docker". Be sure to select the &lt;em&gt;Auto Mount&lt;/em&gt; and &lt;em&gt;Make Permanent&lt;/em&gt; options. For these settings to take effect, the VM will need to be restarted. To reboot, right-click on the VM and select &lt;em&gt;Reset&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="vm2" src="https://codedisciples.in/images/index8/vm2.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
The local "Docker" folder has two files. These will get copied over to the directory (in our container) which will be bound to the local folder using the &lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;--volume&lt;/code&gt; options.  &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="vm3" src="https://codedisciples.in/images/index8/vm3.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
Finally, we will create our nginx container. The &lt;code&gt;-v //c/Docker:/usr/share/nginx/html&lt;/code&gt; in the command, binds "C:\users\abhi_\Docker" to "/usr/share/nginx/html" on the container.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker container run -d --name nginx -p 80:80 -v //c/Docker:/usr/share/nginx/html nginx&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;To verify whether the bind mounting worked, we will run &lt;em&gt;bash&lt;/em&gt; on the container and look for the files in "/usr/share/nginx/html".  &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="vm4" src="https://codedisciples.in/images/index8/vm4.jpg"&gt;&lt;/p&gt;</content><category term="Docker"></category></entry></feed>