<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Code Disciples</title><link href="https://codedisciples.in/" rel="alternate"></link><link href="https://codedisciples.in/feeds/all.atom.xml" rel="self"></link><id>https://codedisciples.in/</id><updated>2019-09-18T14:00:00+05:30</updated><subtitle>A blog for all things code</subtitle><entry><title>Bind Mounting in Docker Toolbox</title><link href="https://codedisciples.in/docker-bind-mounts.html" rel="alternate"></link><published>2019-09-18T14:00:00+05:30</published><updated>2019-09-18T14:00:00+05:30</updated><author><name>Abhishek Pednekar</name></author><id>tag:codedisciples.in,2019-09-18:/docker-bind-mounts.html</id><summary type="html">&lt;p&gt;Creating containers with bind mounting in Docker Toolbox on Windows&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you have racked your brains trying to get Docker bind mounting to work on Windows, you certainly are not alone. Documentation for Docker on Windows is not exactly verbose, especially if you are using the Docker Toolbox. In this post, we will look at binding a local folder in Windows to a directory in a Docker Container using Docker Toolbox. In the example below, we will create an &lt;em&gt;nginx&lt;/em&gt; container with a bind to a local folder in "C:\Users".  &lt;/p&gt;
&lt;p&gt;An important thing to note on Windows is to use &lt;code drive letter&gt;//&lt;/code&gt;&lt;code&gt;/&lt;/code&gt; to reference our drive in the &lt;code&gt;docker container run&lt;/code&gt; command. Therefore, to reference "C:\Users", we will use "//c/users".  &lt;/p&gt;
&lt;p&gt;Next, we will add a shared folder on our virtual machine (VM). In this example, &lt;strong&gt;Oracle VirtualBox&lt;/strong&gt; provides the VM to run Docker Toolbox. We can add a shared folder in the &lt;em&gt;Settings&lt;/em&gt; of our VM.  &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="vm1" src="https://codedisciples.in/images/index8/vm1.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
To add a shared folder, we will select the &lt;em&gt;Shared Folders&lt;/em&gt; option and add a new folder. We will then need to select the desired folder on our computer and give it an appropriate name. This name will be used in the &lt;code&gt;docker container run&lt;/code&gt; command. So for example, if we use "//c/Docker" in our command, we are essentially referring to "C:\Users\abhi_\Docker". Be sure to select the &lt;em&gt;Auto Mount&lt;/em&gt; and &lt;em&gt;Make Permanent&lt;/em&gt; options. For these settings to take effect, the VM will need to be restarted. To reboot, right-click on the VM and select &lt;em&gt;Reset&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="vm2" src="https://codedisciples.in/images/index8/vm2.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
The local "Docker" folder has two files. These will get copied over to the directory (in our container) which will be bound to the local folder using the &lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;--volume&lt;/code&gt; options.  &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="vm3" src="https://codedisciples.in/images/index8/vm3.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
Finally, we will create our nginx container. The &lt;code&gt;-v //c/Docker:/usr/share/nginx/html&lt;/code&gt; in the command binds "C:\users\abhi_\Docker" to "/usr/share/nginx/html" on the container.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker container run -d --name nginx -p 80:80 -v //c/Docker:/usr/share/nginx/html nginx&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;To verify if the bind mounting worked, we will run &lt;em&gt;bash&lt;/em&gt; on the container.  &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="vm4" src="https://codedisciples.in/images/index8/vm4.jpg"&gt;&lt;/p&gt;</content><category term="Docker"></category></entry><entry><title>Namedtuples</title><link href="https://codedisciples.in/named-tuples.html" rel="alternate"></link><published>2019-09-13T23:00:00+05:30</published><updated>2019-09-13T23:00:00+05:30</updated><author><name>Abhishek Pednekar</name></author><id>tag:codedisciples.in,2019-09-13:/named-tuples.html</id><summary type="html">&lt;p&gt;An overview of the namedtuple container type in Python&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post, we will take a look at Python's &lt;strong&gt;namedtuple&lt;/strong&gt; container type. Firstly, namedtuples are immutable containers just like regular tuples. However, unlike regular tuples, which can be accessed only through indices, namedtuples can be accessed via identifiers/keys as well as index values. To use namedtuples, we will need to import the &lt;strong&gt;collections&lt;/strong&gt; module.&lt;/p&gt;
&lt;p&gt;Below, we are defining a namedtuple called &lt;em&gt;Movie&lt;/em&gt; with four fields in a list - &lt;em&gt;name&lt;/em&gt;, &lt;em&gt;genre&lt;/em&gt;, &lt;em&gt;year&lt;/em&gt; and &lt;em&gt;director&lt;/em&gt;. Notice that we are passing &lt;em&gt;Movie&lt;/em&gt; as the first argument to the namedtuple method. This parameter is called the &lt;em&gt;typename&lt;/em&gt; and is essentially the name of the class being created by calling the namedtuple method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Movie&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;genre&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;director&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below, is an alternate way to define namedtuples. Here, rather than passing the field names in a list, we are passing them as a string.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Movie&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;name genre year director&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using either of the above definitions, we can now create new Movie objects. This is akin to creating a Movie class and providing it with a constructor that accepts values for the four fields.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;movie_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;The Dark Knight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2008&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Christopher Nolan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;movie_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;It&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Horror&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Andy Muschietti&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Accessing namedtuple values&lt;/h2&gt;
&lt;p&gt;Accessing values using the field identifiers. This is one of the key advantages of namedtuples as it makes the code more readable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;movie_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;The Dark Knight&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;movie_2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;director&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Andy Muschietti&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Accessing values using indices.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;movie_1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Christopher Nolan&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;movie_2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;It&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Accessing values using &lt;code&gt;getattr()&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2008&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie_2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;genre&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Horror&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Built-in methods&lt;/h2&gt;
&lt;h3&gt;&lt;code&gt;_make()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;_make()&lt;/code&gt; method returns a namedtuple from an iterable. Let's say we have a list containing the attribute values of our Movie instance. By using &lt;code&gt;_make()&lt;/code&gt;, we can convert the list to a namedtuple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;movie_lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Taxi Driver&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Thriller&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1976&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Martin Scorsese&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie_lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Taxi Driver&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;genre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Thriller&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1976&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;director&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Martin Scorsese&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;code&gt;_asdict()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;_asdict()&lt;/code&gt; method returns the contents of the nametuple as an &lt;strong&gt;OrderedDict&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;movie_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_asdict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Dark Knight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;genre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Action&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2008&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;director&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Christopher Nolan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The &lt;code&gt;**&lt;/code&gt; (dictionary unpacking) operator&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;**&lt;/code&gt; operator can be used to generate a namedtuple from a dictionary. &lt;code&gt;**&lt;/code&gt; unpacks the key-value pairs of a dictionary.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;movie_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;March of the Penguins&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                  &lt;span class="ss"&gt;&amp;quot;genre&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Documentary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                  &lt;span class="ss"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                  &lt;span class="ss"&gt;&amp;quot;director&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Luc Jacqet&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;movie_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;March of the Penguins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;genre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Documentary&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;director&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Luc Jacqet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;code&gt;_fields&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;_fields&lt;/code&gt; property is used to return all the field names of a namedtuple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fields&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;genre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;director&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;_fields&lt;/code&gt; property is particularly useful while creating namedtuples that inherit field names from a parent namedtuple. In the example below, we are creating a new namedtuple called &lt;em&gt;NewMovie&lt;/em&gt; by inheriting the fields from the original &lt;em&gt;Movie&lt;/em&gt; namedtuple using the &lt;code&gt;_fields&lt;/code&gt; property. At the same time, we are adding a new field called &lt;em&gt;music&lt;/em&gt; to the NewMovie namedtuple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Movie&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;name genre year director&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;NewMovie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;NewMovie&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fields&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;music&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;movie_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;The Dark Knight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2008&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Christopher Nolan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Hans Zimmer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;movie_1&lt;/span&gt;
&lt;span class="n"&gt;NewMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The Dark Knight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;genre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Action&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2008&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;director&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Christopher Nolan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;music&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hans Zimmer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;code&gt;_replace()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;_replace()&lt;/code&gt; method is used to selectively replace the value of specific fields.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;movie_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;director&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;C. Nolan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;NewMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The Dark Knight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;genre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Action&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2008&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;director&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C. Nolan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;music&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hans Zimmer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category></entry><entry><title>Advanced Git Commands</title><link href="https://codedisciples.in/advanced-git.html" rel="alternate"></link><published>2019-09-03T12:00:00+05:30</published><updated>2019-09-03T12:00:00+05:30</updated><author><name>Abhishek Pednekar</name></author><id>tag:codedisciples.in,2019-09-03:/advanced-git.html</id><summary type="html">&lt;p&gt;A look at some git commands beyond the usual workflow&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post, we will take a look at some useful advanced &lt;strong&gt;git&lt;/strong&gt; commands. These commands essentially supplement the usual git workflow and help in fixing mistakes or undoing changes. This post assumes that the reader already knows the usage of basic git commands like &lt;code&gt;git status&lt;/code&gt;, &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt;, &lt;code&gt;git branch&lt;/code&gt;, &lt;code&gt;git push&lt;/code&gt; etc...&lt;/p&gt;
&lt;p&gt;To demonstrate the usage of these git commands, we will use a simple code snippet. The snippet will be saved in a file named &lt;strong&gt;calc.py&lt;/strong&gt;. The file itself will be present in a local git repository with two branches - &lt;strong&gt;master&lt;/strong&gt; and &lt;strong&gt;new-feature&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Running a &lt;code&gt;git log&lt;/code&gt; command shows that we have only had one commit so far in the local repository. The &lt;code&gt;git branch&lt;/code&gt; command lists all the current local branches.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="initial-setup" src="https://codedisciples.in/images/index6/initial-setup.jpg"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# &lt;span class="nv"&gt;Code&lt;/span&gt; &lt;span class="nv"&gt;snippet&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;basic&lt;/span&gt; &lt;span class="nv"&gt;Arithematic&lt;/span&gt; &lt;span class="nv"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;calc&lt;/span&gt;.&lt;span class="nv"&gt;py&lt;/span&gt;
&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;calc&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;, &lt;span class="nv"&gt;x&lt;/span&gt;, &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; {
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Add&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;{x} + {y} = {x + y}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Sub&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;{x} - {y} = {x - y}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Mul&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;{x} * {y} = {x * y}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Div&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;{x} / {y} = {x / y}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Floor&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;{x} // {y} = {x // y}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    }.&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Not found!&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;The &lt;code&gt;git checkout&lt;/code&gt; command&lt;/h2&gt;
&lt;p&gt;Let's say we made some changes to our code. Now for some reason, before adding our changes to staging (&lt;code&gt;git add&lt;/code&gt;), we decide not to commit them. The best way to bring our code back to its original state will be to use the &lt;code&gt;git checkout&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;To demonstrate, we will modify &lt;strong&gt;calc.py&lt;/strong&gt; by adding a comment after the subtract function in our code snippet - &lt;code&gt;"Sub": f"{x} - {y} = {x - y}", # Subtract function&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Running a &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git diff&lt;/code&gt; in our repository, shows the modified file and the exact changes that were made respectively.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="checkout1" src="https://codedisciples.in/images/index6/checkout1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
To undo the changes, let's run &lt;code&gt;git checkout calc.py&lt;/code&gt;. Running a &lt;code&gt;git status&lt;/code&gt; or &lt;code&gt;git diff&lt;/code&gt; now, will no longer show any changes as the code has been reverted to its original state.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="checkout2" src="https://codedisciples.in/images/index6/checkout2.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Fixing &lt;code&gt;git commit&lt;/code&gt;'s&lt;/h2&gt;
&lt;p&gt;Providing a descriptive commit message is very important as it helps other developers get a high level of understating of the changes that were checked-in. However, there could be scenarios wherein we may provide an incorrect commit message or inadvertently make a typo in our message. These issues can be fixed using the &lt;code&gt;git commit --amend&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;To demonstrate, we will add a new item to our dictionary - &lt;code&gt;"Exp": f"{x} ** {y} = {x ** y}"&lt;/code&gt; and commit the change using - &lt;code&gt;git commit -m "Updated calc function to include square root"&lt;/code&gt;. Clearly, this message is incorrect as we've added an entry for &lt;em&gt;exponent&lt;/em&gt; and not &lt;em&gt;square root&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# &lt;span class="nv"&gt;Code&lt;/span&gt; &lt;span class="nv"&gt;snippet&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;basic&lt;/span&gt; &lt;span class="nv"&gt;Arithematic&lt;/span&gt; &lt;span class="nv"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;calc&lt;/span&gt;.&lt;span class="nv"&gt;py&lt;/span&gt;
&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;calc&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;, &lt;span class="nv"&gt;x&lt;/span&gt;, &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; {
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Add&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;{x} + {y} = {x + y}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Sub&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;{x} - {y} = {x - y}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Mul&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;{x} * {y} = {x * y}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Div&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;{x} / {y} = {x / y}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Floor&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;{x} // {y} = {x // y}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Exp&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;{x} ** {y} = {x ** y}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    }.&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Not found!&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;
Running a &lt;code&gt;git log&lt;/code&gt; shows the last commit with the "bad" commit message.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="amend1" src="https://codedisciples.in/images/index6/amend1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
To fix the message, we simply run &lt;code&gt;git commit --amend -m "Updated calc function to include exponents"&lt;/code&gt;. Running a &lt;code&gt;git log&lt;/code&gt; now will show the updated commit message.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="amend2" src="https://codedisciples.in/images/index6/amend2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
Few &lt;strong&gt;important&lt;/strong&gt; things to note - running a &lt;code&gt;git log&lt;/code&gt; essentially shows us the &lt;em&gt;history&lt;/em&gt; of commits that were made thus far. It also shows us the value of the unique hash associated with our commits. Notice that when we ran the "--amend" to fix our commit message, we did not add a new commit. Instead, we replaced the commit with the "bad" message, with our new commit. This is evident from the value of the hash associated with the two commits. They are not the same. What does this mean? Well, we just modified the git history by running the "--amend" command. This is fine as long as we are the only ones with access to the code base/repository in question or if no one else has pulled our commits before we modified the history. When working in a team wherein multiple developers are accessing the same repository, modifying the git history is risky as it could cause problems with the local repositories of other developers when they pull in our changes. Later in the post, we will look at ways to make corrections without modifying the git history.&lt;/p&gt;
&lt;p&gt;In the previous example, we fixed a "bad" commit message. Now, what if we forgot to include an entire file before running our &lt;code&gt;git commit&lt;/code&gt;? Let's say, we now create a .gitignore file in our repository and would like to include it with the &lt;strong&gt;last&lt;/strong&gt; commit that we made. We can add the .gitignore file to staging and run &lt;code&gt;git commit --amend&lt;/code&gt;. Running this command will open an interactive window that shows us the changes that will be added to the last commit. The commit message can also be modified (in the window) if needed. Since we are not making any further changes, we can use &lt;code&gt;:wq&lt;/code&gt; to exit. Following this, our .gitignore file will be added to the last commit.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="amend3" src="https://codedisciples.in/images/index6/amend3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
We can verify the addition of the .gitignore file by running a &lt;code&gt;git log --stat&lt;/code&gt;. Also, note that the commit hash has changed which means we modified our git history.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="amend4" src="https://codedisciples.in/images/index6/amend4.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Cherry picking with git&lt;/h2&gt;
&lt;p&gt;A very common issue that developers run into is making commits to an incorrect branch by forgetting to run the &lt;code&gt;git checkout &amp;lt;branchname&amp;gt;&lt;/code&gt; command before committing their changes. So in our case, say we intended to make our last commit in the &lt;strong&gt;new-feature&lt;/strong&gt; branch but accidentally ended up making the commits in &lt;strong&gt;master&lt;/strong&gt;. Luckily, git provides a way to correct this easily.&lt;/p&gt;
&lt;p&gt;Below is what our commit history looks like at the moment. What we want to do now is to move the "Updated calc function to include exponents" commit to the &lt;strong&gt;new-feature&lt;/strong&gt; branch after which &lt;strong&gt;master&lt;/strong&gt; will only have the "Initial commit".&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="cp1" src="https://codedisciples.in/images/index6/cp1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
We will use the &lt;code&gt;git cherry-pick&lt;/code&gt; command to copy this commit to the new branch. This command creates a new commit based on an existing one. Please note, that cherry-pick will &lt;u&gt;not&lt;/u&gt; delete the original commit. &lt;/p&gt;
&lt;p&gt;To cherry-pick,
&lt;br/&gt;
1. Copy the hash of the commit that needs to be copied over to the new branch (the first six characters will do)
&lt;br/&gt;
2. Switch to the branch where we intend to create the new commit. In our case, we will run &lt;code&gt;git checkout new-feature&lt;/code&gt; to switch from the &lt;strong&gt;master&lt;/strong&gt; to the &lt;strong&gt;new-feature&lt;/strong&gt; branch
&lt;br/&gt;
3. Now, run the cherry-pick command to copy the commit - &lt;code&gt;git cherry-pick 7f5fa7&lt;/code&gt;
&lt;br/&gt;
4. Run a &lt;code&gt;git log&lt;/code&gt; to confirm whether the branch was copied over&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="cp2" src="https://codedisciples.in/images/index6/cp2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
Now that our commit has been copied over to the &lt;strong&gt;new-feature&lt;/strong&gt; branch, we need to remove it from our &lt;strong&gt;master&lt;/strong&gt; branch. To do this, we will use the &lt;code&gt;git reset&lt;/code&gt; command. There are three types of reset's in git - soft, mixed (default) and hard. Let's try each one of them on our &lt;strong&gt;master&lt;/strong&gt; branch to remove the commit. To run &lt;code&gt;git reset&lt;/code&gt;, we will first need to copy the hash of the commit that was made &lt;u&gt;before&lt;/u&gt; the one that needs to be deleted (the "Inital commit" in our case).&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;b&gt;&lt;u&gt;Soft Reset&lt;/u&gt;&lt;/b&gt;&lt;br/&gt;
To run a soft reset on our &lt;strong&gt;master&lt;/strong&gt; branch, we will first need to switch to the &lt;strong&gt;master&lt;/strong&gt; branch - &lt;code&gt;git checkout master&lt;/code&gt;. Next, we will run &lt;code&gt;git reset --soft 2da509&lt;/code&gt; on the branch. On running the soft reset, the &lt;strong&gt;master&lt;/strong&gt; branch will no longer have the commit that was copied over to &lt;strong&gt;new-feature&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="reset1" src="https://codedisciples.in/images/index6/reset1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
However, if we now run a &lt;code&gt;git status&lt;/code&gt; in &lt;strong&gt;master&lt;/strong&gt;, we will see the changes from the branch that was removed, in the staging area. So, a soft reset will revert our branch to the specified commit but will keep the changes (associated with the commit that was removed), in our staging area. We, therefore, do not lose any of the changes.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="reset2" src="https://codedisciples.in/images/index6/reset2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;b&gt;&lt;u&gt;Mixed Reset&lt;/u&gt;&lt;/b&gt;&lt;br/&gt;
This is the default reset option provided by git. Again, we will run this command using the hash of the "Initial commit" - &lt;code&gt;git reset 2da509&lt;/code&gt;. Like the soft reset, we do not lose any changes. However, the changes will now be in the working directory as opposed to the staging area.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="reset3" src="https://codedisciples.in/images/index6/reset3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;b&gt;&lt;u&gt;Hard Reset&lt;/u&gt;&lt;/b&gt;&lt;br/&gt;
Since our intent of running the reset was to completely get rid of the changes (in &lt;strong&gt;master&lt;/strong&gt;) that were moved to the &lt;strong&gt;new-feature&lt;/strong&gt; branch, neither the soft nor the mixed reset options served our purpose. We will now look at the hard reset option, which will revert tracked files (calc.py) to their original state and will leave untracked files (.gitignore) alone. So let's run &lt;code&gt;git reset --hard 2da509&lt;/code&gt;. Notice that a &lt;code&gt;git status&lt;/code&gt; only shows us the untracked files now.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="reset4" src="https://codedisciples.in/images/index6/reset4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
Removing an untracked file can be achieved by using the &lt;code&gt;git clean -df&lt;/code&gt; command. The &lt;code&gt;-df&lt;/code&gt; force deletes files and directories. Our &lt;strong&gt;master&lt;/strong&gt; branch is now in its desired state.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="reset5" src="https://codedisciples.in/images/index6/reset5.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Reverting to old commits&lt;/h2&gt;
&lt;p&gt;Let's assume that we ran the hard reset on our branch accidentally and we now need those changes back. Are we out of luck? Fortunately, no! Enter &lt;code&gt;git reflog&lt;/code&gt;. The &lt;code&gt;git reflog&lt;/code&gt; command shows us the entire history of all commits made in a particular branch. The commits are shown in the order of reference. The reflog expiration date is 90 days by default. &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="reflog" src="https://codedisciples.in/images/index6/reflog.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
Now let's say we want to revert to the changes that were in the repository prior to running our &lt;code&gt;git reset&lt;/code&gt; commands. We will need to copy the appropriate hash and run a &lt;code&gt;git checkout &amp;lt;hash&amp;gt;&lt;/code&gt; command. Running this command on a hash as opposed to a branch name will put us in a detached HEAD state. At a high level, this means that we are no longer checked out to the current branch (HEAD). Running a &lt;code&gt;git log&lt;/code&gt; now will show both our commits.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="dhead" src="https://codedisciples.in/images/index6/d-head.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
To save our changes, we will need to create a branch from the detached HEAD. So let's create one called &lt;em&gt;new-feature-backup&lt;/em&gt; - &lt;code&gt;git branch new-feature-backup&lt;/code&gt;. &lt;code&gt;git branch&lt;/code&gt; will now show three branches. We can switch to the new backup branch and run a &lt;code&gt;git log&lt;/code&gt; to confirm that our desired commits exist in the new branch.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="dhead" src="https://codedisciples.in/images/index6/d-head2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
Previously, we spoke about not modifying the git history if our commits have already been pulled by others. Let us now look at options to undo commits without changing the git history. This will ensure that when others pull in our changes, we will not be impacting their code base. We will use the &lt;code&gt;git revert&lt;/code&gt; command to create a &lt;em&gt;new&lt;/em&gt; commit to reverse changes from a previous commit.&lt;/p&gt;
&lt;p&gt;Let us now undo the changes that we introduced in the "Updated calc function to include exponents" commit. To do that, copy the hash of that commit and run a &lt;code&gt;git revert &amp;lt;hash&amp;gt;&lt;/code&gt;. This will open an interactive window. Since we are not making any other changes, let's save and exit using &lt;code&gt;:wq&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="revert1" src="https://codedisciples.in/images/index6/revert1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="revert2" src="https://codedisciples.in/images/index6/revert2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
Now, running a &lt;code&gt;git log&lt;/code&gt; will show us the new commit that was created by reversing the previous commit which is exactly what we wanted. Also, notice that the hashes of the older commits are unchanged. We have therefore not modified the git history. If others were to now pull our changes, they will just be pulling in the new commit that will reverse the changes from the previous commit in their code base as well.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="revert3" src="https://codedisciples.in/images/index6/revert3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
Running a &lt;code&gt;git diff&lt;/code&gt; on the two most recent branches (using their hash) will show us the exact changes that were undone.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="revert4" src="https://codedisciples.in/images/index6/revert4.jpg"&gt;&lt;/p&gt;</content><category term="Git"></category></entry><entry><title>Pythonic Dictionaries</title><link href="https://codedisciples.in/pythonic-dictionaries.html" rel="alternate"></link><published>2019-09-01T12:00:00+05:30</published><updated>2019-09-01T12:00:00+05:30</updated><author><name>Abhishek Pednekar</name></author><id>tag:codedisciples.in,2019-09-01:/pythonic-dictionaries.html</id><summary type="html">&lt;p&gt;An overview of some dictionary methods&lt;/p&gt;</summary><content type="html">&lt;p&gt;Dictionaries are one of the most helpful data structures in Python. In this post, we'll look at some methods that make dictionary usage more pythonic.&lt;/p&gt;
&lt;h2&gt;The &lt;code&gt;get()&lt;/code&gt; method&lt;/h2&gt;
&lt;p&gt;A common way to check whether a key exists in a dictionary is to iterate over the dictionary using a loop. Another way would be to use, the &lt;em&gt;"&lt;code&gt;if&lt;/code&gt; key &lt;code&gt;in&lt;/code&gt; dict"&lt;/em&gt; syntax. While these work, they do not keep in line with the &lt;em&gt;easier to ask for forgiveness than permission&lt;/em&gt; (EAFP) coding style specified in the Python documentation.&lt;/p&gt;
&lt;p&gt;Python dictionaries provide a &lt;code&gt;get()&lt;/code&gt; method that allows a &lt;em&gt;default&lt;/em&gt; parameter which can be used as a fall-back value in case the key does not exist. In the below example, we use the &lt;code&gt;get()&lt;/code&gt; method to look for a key a dictionary. We also provide a default parameter of &lt;em&gt;Not found&lt;/em&gt; that will be returned if the key does not exist. If the key is present, then the value associated with that key will be returned.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;alter_ego&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;&amp;quot;Bruce Wayne&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Batman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="ss"&gt;&amp;quot;Clark Kent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Superman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="ss"&gt;&amp;quot;Peter Parker&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Spiderman&amp;quot;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;alter_ego&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Bruce Wayne&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Not found&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Batman&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;alter_ego&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Tony Stark&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Not found&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Not found&amp;#39;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;The &lt;code&gt;setdefault()&lt;/code&gt; method&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;setdefault()&lt;/code&gt; method is used to set a value for a key that does &lt;u&gt;not&lt;/u&gt; exist in a dictionary. If the key exists, then its value remains unchanged.&lt;/p&gt;
&lt;p&gt;Here we see that by using the &lt;code&gt;setdefault()&lt;/code&gt; method on the dictionary, we are able to add a new key-value pair that did not exist in the dictionary.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;alter_ego&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;&amp;quot;Bruce Wayne&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Batman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="ss"&gt;&amp;quot;Clark Kent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Superman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="ss"&gt;&amp;quot;Peter Parker&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Spiderman&amp;quot;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;alter_ego&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Tony Stark&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Ironman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Ironman&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;alter_ego&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bruce Wayne&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Batman&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Clark Kent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Superman&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Peter Parker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Spiderman&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Tony Stark&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Ironman&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Conversely, if we try to set the value of an existing key, it remains unchanged.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;alter_ego&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Bruce Wayne&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Robin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Batman&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;alter_ego&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bruce Wayne&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Batman&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Clark Kent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Superman&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Peter Parker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Spiderman&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Tony Stark&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Ironman&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Sorting Dictionaries&lt;/h2&gt;
&lt;p&gt;Iterating over dictionaries may or may not return a sorted order of key-value pairs. However, if for any reason, we required either keys or values of a dictionary in a sorted order, then using the &lt;code&gt;sorted()&lt;/code&gt; method in conjunction with &lt;code&gt;items()&lt;/code&gt;, will serve the purpose. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;D&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Sorting&lt;/span&gt; &lt;span class="n"&gt;based&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;sorted&lt;/code&gt; method also provides a &lt;code&gt;reverse&lt;/code&gt; parameter (that takes a boolean value) using which the keys or values can be sorted in reverse order.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Sorting&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we need to sort based on the values rather than the keys, we can use the &lt;code&gt;key&lt;/code&gt; parameter of the &lt;code&gt;sorted()&lt;/code&gt; method and set its value to the below lambda function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; 
           &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],)&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Sorting&lt;/span&gt; &lt;span class="n"&gt;based&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="k"&gt;values&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; 
           &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
           &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Merging dictionaries&lt;/h2&gt;
&lt;p&gt;Sometimes, we may need a way to combine multiple dictionaries into one so that the resulting dictionary is a combination of the key-value pairs from all the source dictionaries. Python offers multiple ways to merge dictionaries into one. One of them is using the &lt;code&gt;update()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;In the below example, we are combining two dictionaries, &lt;em&gt;dict1&lt;/em&gt; and &lt;em&gt;dict2&lt;/em&gt; into a new dictionary &lt;em&gt;dict3&lt;/em&gt;. Note that both the source dictionaries contain the key &lt;em&gt;B&lt;/em&gt;. The way we call &lt;code&gt;update()&lt;/code&gt; on the source dictionaries determines which value of &lt;em&gt;B&lt;/em&gt; will be included in the new dictionary. Since the &lt;code&gt;update()&lt;/code&gt; method is being run on &lt;em&gt;dict2&lt;/em&gt; last, the resulting dictionary contains &lt;code&gt;"B": 3&lt;/code&gt; rather than &lt;code&gt;"B": 2&lt;/code&gt;. The &lt;code&gt;update()&lt;/code&gt; method can be used to merge any number of dictionaries.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dict1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dict2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dict3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dict3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dict3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dict3&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another way to merge dictionaries is to use the ** operator for unpacking objects. Again in case of repeating keys in any of the source dictionaries, the order of unpacking will determine which value is chosen for that key. The below syntax is applicable starting with Python 3.5.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dict1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dict2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dict3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;D&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;E&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dict4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;dict1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;dict2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;dict3&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dict4&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;E&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Emulate a switch statement with dictionaries&lt;/h2&gt;
&lt;p&gt;Unlike languages such as C# and Java, Python does not provide a &lt;code&gt;switch&lt;/code&gt; statement out of the box. A &lt;code&gt;switch&lt;/code&gt; statement is essentially a cleaner representation of an &lt;code&gt;if-elif-else&lt;/code&gt; block containing a "fall-through" for each block with a &lt;code&gt;break&lt;/code&gt; statement. We can however, use a Python dictionary combined with a &lt;code&gt;get()&lt;/code&gt; (for the &lt;code&gt;default&lt;/code&gt; case in a &lt;code&gt;switch&lt;/code&gt; statement) to obtain a &lt;code&gt;switch&lt;/code&gt; like representation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;f1_teams&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;random_team&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
        &lt;span class="k"&gt;return&lt;/span&gt; {
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Mercedes&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: [&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Ham&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Bot&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;], 
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Ferrari&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: [&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Lec&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Vet&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;], 
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;McLaren&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: [&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Sai&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Nor&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;], 
        &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Alpha&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: [&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Rai&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Gio&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;]
        }.&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;random_team&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;No drivers&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;f1_teams&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Mercedes&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
[&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;Ham&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;Bot&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;]

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;f1_teams&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Redbull&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;No drivers&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;An &lt;code&gt;if-elif-else&lt;/code&gt; version of this would be as follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;f1_teams&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;team&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;team&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Mercedes&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:
        &lt;span class="k"&gt;return&lt;/span&gt; [&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Ham&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Bot&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;]
    &lt;span class="nv"&gt;elif&lt;/span&gt; &lt;span class="nv"&gt;team&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Ferrari&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:
        &lt;span class="k"&gt;return&lt;/span&gt; [&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Lec&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Vet&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;]
    &lt;span class="nv"&gt;elif&lt;/span&gt; &lt;span class="nv"&gt;team&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;McLaren&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:
        &lt;span class="k"&gt;return&lt;/span&gt; [&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Sai&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Nor&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;]
    &lt;span class="nv"&gt;elif&lt;/span&gt; &lt;span class="nv"&gt;team&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Alpha&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:
        &lt;span class="k"&gt;return&lt;/span&gt; [&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Rai&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Gio&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;]
    &lt;span class="k"&gt;else&lt;/span&gt;:
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;No drivers&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;f1_teams&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Mercedes&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
[&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;Ham&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;Bot&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;]

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;f1_teams&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Redbull&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;No drivers&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category></entry><entry><title>Plotting on Google Maps with gmplot</title><link href="https://codedisciples.in/google-map-plots.html" rel="alternate"></link><published>2019-08-29T12:00:00+05:30</published><updated>2019-08-29T12:00:00+05:30</updated><author><name>Abhishek Pednekar</name></author><id>tag:codedisciples.in,2019-08-29:/google-map-plots.html</id><summary type="html">&lt;p&gt;Add markers, polygons, heatmaps and more to Google Maps with Python&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post, we'll look at plotting different plot types on Google maps using the &lt;a href="https://github.com/vgm64/gmplot"&gt;gmplot&lt;/a&gt; library in Python (v3.7). This is great if you need to highlight a specific section like a building, a street, a locality or other areas of interest on a map. &lt;strong&gt;gmplot&lt;/strong&gt; provides a variety of plots out of the box.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Polygons with fills&lt;/li&gt;
&lt;li&gt;Drop pins&lt;/li&gt;
&lt;li&gt;Scatter points&lt;/li&gt;
&lt;li&gt;Heatmaps&lt;/li&gt;
&lt;li&gt;Gridlines &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll be using a simple example of plotting a route between two points and highlighting some areas of interest around them.&lt;/p&gt;
&lt;p&gt;The complete code is available in this &lt;a href="https://github.com/AbhishekPednekar84/codedisciples-blog-posts/tree/master/Index_4-google-map-plots"&gt;Github repository&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Google API Key&lt;/h2&gt;
&lt;p&gt;Before we start coding, we need to procure an API key from the &lt;a href="https://cloud.google.com/console/google/maps-apis/overview"&gt;Google Cloud Platform Console&lt;/a&gt;. Refer to this &lt;a href="https://developers.google.com/maps/documentation/javascript/get-api-key"&gt;link&lt;/a&gt; for steps to obtain a new key. Google recommends restricting the API key to avoid unauthorized usage. For this demo, we will be running our app on a local Python http server. Hence, we will need to add &lt;strong&gt;localhost&lt;/strong&gt; as a referrer. To do this, select &lt;em&gt;HTTP referrers (web sites)&lt;/em&gt; under &lt;em&gt;Application restrictions&lt;/em&gt; and add &lt;strong&gt;localhost&lt;/strong&gt;. This will ensure that when we use the API key to generate a map from our localhost, Google will &lt;u&gt;not&lt;/U&gt; deny the request. Failing to do this, will result in a &lt;em&gt;referrer not allowed&lt;/em&gt; error.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="Google-API_Key" src="https://codedisciples.in/images/index4/google-api-key.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Python code&lt;/h2&gt;
&lt;p&gt;Before we start writing out Python code, we will need to install the &lt;strong&gt;gmplot&lt;/strong&gt; library. But before that, let's create a &lt;a href="https://www.youtube.com/watch?v=APOPm01BVrk"&gt;virtual environment&lt;/a&gt;. Once the environment is created and activated run &lt;code&gt;pip install gmplot&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once we import the library, we will create an object of the &lt;em&gt;GoogleMapPlotter&lt;/em&gt; class. We can do this in one of two ways.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Passing the coordinates (latitude and longitude) of the desired location. We will also need to specify the level of the desired zoom&lt;/li&gt;
&lt;li&gt;Using the &lt;em&gt;from_geocode&lt;/em&gt; method and passing the name of our location&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll be using the coordinates in our example. We will also need to specify our api key in the code. I'll be including this in an &lt;a href="https://www.youtube.com/watch?v=IolxqkL7cD8"&gt;environment vraiable&lt;/a&gt;. To generate coordinates, use this &lt;a href="https://www.latlong.net"&gt;website&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gmplot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;gmplot&lt;/span&gt;

&lt;span class="c1"&gt;# Using the location coordinates&lt;/span&gt;
&lt;span class="n"&gt;gmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gmplot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GoogleMapPlotter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;13.004707&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;77.564177&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Using the location name&lt;/span&gt;
&lt;span class="n"&gt;gmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gmplot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GoogleMapPlotter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_geocode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bangalore&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;gmap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apikey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GOOGLE_API_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;
Now, let's start plotting. The coordinates above are of my old high school. We will add a marker for those coordinates and also specify additional coordinates to plot a polygon highlighting the school.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;u&gt;&lt;strong&gt;Marker&lt;/strong&gt;&lt;/u&gt;:&lt;br/&gt;
To add a &lt;strong&gt;marker&lt;/strong&gt;, we will be passing the coordinates to the &lt;code&gt;marker&lt;/code&gt; method. We will also include a color and a title for the marker. &lt;/p&gt;
&lt;p&gt;Please note that &lt;code&gt;gmap.coloricon = "http://www.googlemapsmarkers.com/v1/%s/"&lt;/code&gt; needs to be included &lt;strong&gt;only&lt;/strong&gt; for the Windows platform. This is due to an existing issue in the library.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;gmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coloricon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;http://www.googlemapsmarkers.com/v1/%s/&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;gmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;004707&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;564177&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;#f0dd92&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;School&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;
&lt;u&gt;&lt;strong&gt;Polygon&lt;/strong&gt;&lt;/u&gt;:&lt;br/&gt;
To add a &lt;strong&gt;polygon with fill&lt;/strong&gt; to highlight our location, we will need to specify tuples of latitudes and longitudes and pass them to the &lt;code&gt;ploygon&lt;/code&gt; method. We will also specify a color for the fill.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;school_lats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;school_longs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;004885&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;563913&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;004728&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;563907&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;004563&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;563908&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;004558&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;564166&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;004563&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;564455&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;004730&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;564450&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;004882&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;564450&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;004882&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;564176&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;school_lats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;school_longs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;cornflowerblue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;gmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;school_map.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;draw&lt;/code&gt; method will generate our map. In this case, I am generating the html file in the project folder. We can provide an absolute path to the method. As mentioned earlier, we will be using a local http server to view the map. To start the server run &lt;code&gt;python -m http.server&lt;/code&gt; in the activated virtual environment. The local server runs on port 8000 by default. So our url will be &lt;em&gt;http://localhost:8000/school_map.html&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I will also be dropping a point on, and adding a polygon around my old apartment. In the next section, we will plot couples our routes between the school and the apartment. The complete code will be available in the Github repository.&lt;/p&gt;
&lt;p&gt;Here's what our map looks like at the moment.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="Marker-Polygon" src="https://codedisciples.in/images/index4/marker-polygon.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;u&gt;&lt;strong&gt;Line Plot&lt;/strong&gt;&lt;/u&gt;:&lt;br/&gt;
We will now plot two routes between the school and the apartment. To do this, we will first need the coordinates for multiples points along the routes and pass them to the &lt;code&gt;plot&lt;/code&gt; method. The color and the thickness of the plot can also be specified in the method call.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Coordinates&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="n"&gt;path_one_lats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path_one_longs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;004619&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;563855&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;003328&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;563881&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;002994&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;563892&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;002655&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;563889&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;002639&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;563558&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;002602&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;562826&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path_one_lats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path_one_longs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;cornflowerblue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edge_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Coordinates&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;
&lt;span class="n"&gt;path_two_lats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path_two_longs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;003690&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;563862&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;003640&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;562444&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;002840&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;562830&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;002602&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;562826&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path_two_lats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path_two_longs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edge_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here's what our plots look like now. The alternate route is in green and has been specified only from the point where it diverges from the primary route.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="Routes" src="https://codedisciples.in/images/index4/routes.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;u&gt;&lt;strong&gt;Scatter Plots and Heatmaps&lt;/strong&gt;&lt;/u&gt;:&lt;br/&gt;
Next, we will add some &lt;strong&gt;scatters&lt;/strong&gt; and &lt;strong&gt;heatmaps&lt;/strong&gt; to indicate some areas of interest around the school. Agreed, that this is not the best use case for a scatter plot or a heatmap. But the idea here is to only show the implementation.&lt;/p&gt;
&lt;p&gt;As was the case before, we will need to pass the desired coordinates to the &lt;code&gt;scatter&lt;/code&gt; and the &lt;code&gt;heatmap&lt;/code&gt; methods. In the &lt;code&gt;scatter&lt;/code&gt; method, we will be passing &lt;code&gt;maker=False&lt;/code&gt; since we do not want to drop pins on the coordinates. We will also be specifying the size and the color of the scatters.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Coordinates&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Scatters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Heatmaps&lt;/span&gt;
&lt;span class="n"&gt;aoi_lats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aoi_longs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;004716&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;563684&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;005855&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;564780&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;007455&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;563552&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;006760&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;562985&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;004268&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;562464&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heatmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aoi_lats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aoi_longs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aoi_lats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aoi_longs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;#6e2142&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;
&lt;strong&gt;Scatter plot&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="Scatters" src="https://codedisciples.in/images/index4/scatters.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;strong&gt;Heatmap&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="Heatmaps" src="https://codedisciples.in/images/index4/heatmaps.jpg"&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Google Maps"></category></entry><entry><title>A reminder app with Python, Twilio and AWS Lambda</title><link href="https://codedisciples.in/reminders.html" rel="alternate"></link><published>2019-08-22T12:00:00+05:30</published><updated>2019-08-22T12:00:00+05:30</updated><author><name>Abhishek Pednekar</name></author><id>tag:codedisciples.in,2019-08-22:/reminders.html</id><summary type="html">&lt;p&gt;Send reminders on WhatsApp with Python, Twilio and AWS Lambda&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, my wife and I missed the due date alert on a pretty important payment. This, despite having reminders set on our phones. Although we were able to sort it out without a lot of hassle, we knew that we couldn't afford a repeat of this scenario. Since an auto-payment (which I am not a big fan of anyways) wasn't an option here, additional alerting was the way to go. So as a true engineer, I decided to set up a custom alerting mechanism to which I would "hopefully" pay more attention. Since WhatsApp is pretty heavily used in my household, sending the reminder as a WhatsApp message to multiple phones seemed like a good idea. &lt;/p&gt;
&lt;p&gt;In this post, we will create a very simple Python (v3.7) script that calls the Twilio sandbox API to send an event reminder via WhatsApp. The reminder details and the list of recipients will be stored in separate json files. To run the script daily, we will be creating a function in AWS Lambda. &lt;/p&gt;
&lt;p&gt;The entire code is available in &lt;a href="https://github.com/AbhishekPednekar84/reminder_app_twilio_aws_lambda"&gt;this Github repository&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Twilio&lt;/h2&gt;
&lt;p&gt;Before we get to the code, we will need to create a &lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio&lt;/a&gt; account. The process is pretty straightforward. Once you are logged in, you will see an &lt;strong&gt;Account Security ID (SID)&lt;/strong&gt; and an &lt;strong&gt;Authentication Token&lt;/strong&gt; in your Twilio Console Dashboard. Those are key parameters that will be needed to send the WhatsApp message. We'll be using those later when working with AWS. &lt;/p&gt;
&lt;p&gt;To set up the sandbox, navigate to the All Products and Services console and click on WhatsApp. Twilio will then give you a sandbox number (that can be saved as a contact on your phone) and walk you through the setup which involves sending an &lt;strong&gt;activation code&lt;/strong&gt; to the sandbox number to enable messaging between your phone number and the sandbox. The short tutorial will also cover one-way and two-way messaging. Once you have sent the activation code from your phone to the sandbox number, you are all set to send and receive messages. If you would like other's to be able to communicate with the sandbox, the same activation code will need to be sent from their phones to the sandbox number. All the phone numbers that send the activation code will be listed as sandbox participants in your Twilio account.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="twilio1" src="https://codedisciples.in/images/index3/twilio1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="twilio1" src="https://codedisciples.in/images/index3/twilio2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
When you use the sandbox to send a random message to your number, a 24-hour messaging window is created between the sandbox and your number. To extend this window for whatever reason, you will need to send a message back to the sandbox within those 24 hours. Luckily, the sandbox provides three messaging templates that do not follow this 24-hour rule. Messages composed using these templates can be sent any number of times at varying frequencies. The template that we will be using is &lt;code&gt;Your {{1}} appointment is coming up on {{2}}&lt;/code&gt;. More on this in the next section.&lt;/p&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;p&gt;To work with Twilio using Python, we'll need to install the twilio library using &lt;code&gt;pip install twilio&lt;/code&gt;. But before that, let's create a &lt;a href="https://www.youtube.com/watch?v=APOPm01BVrk"&gt;virtual environment&lt;/a&gt;. This is optional but always a good practice to keep your project dependencies isolated. Alternately, you can &lt;code&gt;pip install&lt;/code&gt; from the &lt;em&gt;requirements.txt&lt;/em&gt; file in the repository - &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;. The requirements file includes the &lt;em&gt;pytest&lt;/em&gt; and &lt;em&gt;pre-commit&lt;/em&gt; libraries as well. pytest is being used to run a really really basic test in test_reminders.py. pre-commit runs a hook on the Python code before committing the code. You can learn more about pre-commit hooks in &lt;a href="https://www.codedisciples.in/pre-commit.html"&gt;this post&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Next, let's create the two json files that I mentioned earlier.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reminder_events.json&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This file contains details such as the title of our reminder, it's frequency (monthly / yearly) and the due date. For monthly reminders, the due date will contain only the &lt;strong&gt;day&lt;/strong&gt; as the reminder will be triggered on the same day each month. For the yearly reminders, the due date is in the format &lt;em&gt;month-day&lt;/em&gt;. I did not have any weekly or quarterly events. Hence the subsequent code does not take those frequencies into consideration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;events&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Electricity Bill&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;due&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;17&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;frequency&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;M&amp;quot;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Car Insurance Premium&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;due&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;10-1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;frequency&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Y&amp;quot;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;directory.json&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This file contains all our recipient names and phone numbers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;members&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Recipient 1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;phone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;+919xxxxxxxxx&amp;quot;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Recipient 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;&amp;quot;phone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;+919xxxxxxxxx&amp;quot;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;check_appointments()&lt;/em&gt; is our primary method which will look for events that are due. This will also be called by the AWS Lambda function. Lambda refers to this method as the &lt;em&gt;handler&lt;/em&gt;. The &lt;em&gt;event&lt;/em&gt; and &lt;em&gt;context&lt;/em&gt; parameters are specific to Lambda. &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/python-programming-model-handler-types.html"&gt;Click here&lt;/a&gt; for additional information.   &lt;/p&gt;
&lt;p&gt;First, we will extract the day and month from today's date. Additionally, we will format the date as &lt;em&gt;month, day&lt;/em&gt; (Ex: &lt;em&gt;August, 22&lt;/em&gt;). This is just a personal preference. Please refer to the &lt;a href="https://docs.python.org/3.7/library/datetime.html?highlight=datetime#strftime-and-strptime-behavior"&gt;docs&lt;/a&gt; in case you would like a different format.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio.rest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_appointments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;current_day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
    &lt;span class="n"&gt;current_month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;

    &lt;span class="n"&gt;formatted_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%B, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;reminder_events.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;reminders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, our script will read the reminder_events.json file (using the &lt;a href="https://www.youtube.com/watch?v=9N6a-VLBa2I&amp;amp;t=543s"&gt;json&lt;/a&gt; library and a &lt;a href="https://www.youtube.com/watch?v=-aKFBoZpiqA"&gt;context manager&lt;/a&gt;) and iterate over its contents. In the &lt;code&gt;for&lt;/code&gt; loop, the code checks if the due date (day or month-day combination) matches the current day. If yes, we then make a call to the &lt;em&gt;send_whatsapp_message&lt;/em&gt; method to send the WhatsApp message. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;reminder&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;reminders&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;events&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;]:
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;reminder&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;frequency&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;] &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;M&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;reminder&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;due&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;] &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;str&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current_day&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
                &lt;span class="nv"&gt;send_whatsapp_message&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;reminder&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;title&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;], &lt;span class="nv"&gt;formatted_date&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;elif&lt;/span&gt; &lt;span class="nv"&gt;reminder&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;frequency&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;] &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Y&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:
            &lt;span class="nv"&gt;r_month&lt;/span&gt;, &lt;span class="nv"&gt;r_day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;reminder&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;due&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;].&lt;span class="nv"&gt;split&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;r_month&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;str&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current_month&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;r_day&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;str&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current_day&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
                &lt;span class="nv"&gt;send_whatsapp_message&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;reminder&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;title&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;], &lt;span class="nv"&gt;formatted_date&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;send_whatsapp_message&lt;/em&gt; takes the event name from the json file and the formatted date as parameters.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;send_whatsapp_message&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;event_name&lt;/span&gt;, &lt;span class="nv"&gt;event_date&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
    # &lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="nv"&gt;SID&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;TOKEN&lt;/span&gt; &lt;span class="nv"&gt;values&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="nv"&gt;be&lt;/span&gt; &lt;span class="nv"&gt;read&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;AWS&lt;/span&gt; &lt;span class="nv"&gt;Lambda&lt;/span&gt; &lt;span class="nv"&gt;Console&lt;/span&gt;
    &lt;span class="nv"&gt;account_sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;os&lt;/span&gt;.&lt;span class="nv"&gt;environ&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;account_sid&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;]
    &lt;span class="nv"&gt;auth_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;os&lt;/span&gt;.&lt;span class="nv"&gt;environ&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;auth_token&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;]

    # &lt;span class="nv"&gt;Create&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;Twilio&lt;/span&gt; &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="nv"&gt;object&lt;/span&gt;
    &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Client&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;account_sid&lt;/span&gt;, &lt;span class="nv"&gt;auth_token&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;

    &lt;span class="nv"&gt;event_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;10 AM ({event_name})&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

    # &lt;span class="nv"&gt;Read&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;recipient&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;directory&lt;/span&gt;.&lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="nv"&gt;file&lt;/span&gt;
    &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;open&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;directory.json&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;:
        &lt;span class="nv"&gt;recipients&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt;.&lt;span class="nv"&gt;load&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;recipient&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;recipients&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;members&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;]:
        &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;client&lt;/span&gt;.&lt;span class="nv"&gt;messages&lt;/span&gt;.&lt;span class="nv"&gt;create&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Your appointment is coming up on {event_date} at {event_name}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
            &lt;span class="nv"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;WhatsApp:+14155238886&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
            &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;WhatsApp:{recipient[&amp;#39;phone&amp;#39;]}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember the Twilio Account SID and the Authentication Token? We'll be adding them as environment variables in AWS in the next section. Right now, we will read the environment variable values into Python variables using &lt;code&gt;os.environ&lt;/code&gt;. Once we read the contents of &lt;em&gt;directory.json&lt;/em&gt;, we iterate over them and compose a message for each recipient.  +14155238886 is the sandbox number. Prefixing the &lt;strong&gt;whatsapp:&lt;/strong&gt; is required for both the sender and the recipient numbers. &lt;/p&gt;
&lt;p&gt;Finally, the body of the message uses the template I mentioned earlier. In this pre-provisioned sandbox template, we only have the freedom to modify the values of the &lt;em&gt;event_name&lt;/em&gt; and &lt;em&gt;event_date&lt;/em&gt;. Although both are being passed as arguments to the method, I am modifying event name as &lt;em&gt;10 AM ({event_name})&lt;/em&gt; just to make the message grammatically correct. So if I am being reminded about an electricity bill payment on August 31st, the message would read as &lt;code&gt;Your appointment is coming up on August, 31 at 10 AM (Electricity Bill)&lt;/code&gt;. 10 AM is just a random time that I chose since my script will be running at around 10 AM local time. The message can, however, be modified in any way that one chooses as long as we stay true to the template.&lt;/p&gt;
&lt;h2&gt;AWS Lambda&lt;/h2&gt;
&lt;p&gt;Now that we have our Python script and our Twilio sandbox ready to go, let's schedule the script in AWS Lambda. Sign up for the &lt;a href="https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;amp;all-free-tier.sort-order=asc"&gt;AWS Free Tier&lt;/a&gt;. In the AWS Management Console, look for Lambda.  &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="lambda1" src="https://codedisciples.in/images/index3/lambda1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
On the following page, you will see an option to create a Lambda function. The free tier for Lambda offers 1M free requests per month. So its a great platform to run simple scripts like this. &lt;/p&gt;
&lt;p&gt;Give your function a name and select the runtime as Python 3.7&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="lambda1" src="https://codedisciples.in/images/index3/lambda2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
On the configuration page, set the code entry type as Upload zip file. Next, set the two environment variables for the Account SID and the Authentication Token. Change the Handler to &lt;code&gt;module_name.function_name&lt;/code&gt;. In this case, all our code is in the &lt;em&gt;reminders.py&lt;/em&gt; file and we require the Lambda function to call the &lt;em&gt;check_appointments()&lt;/em&gt; method. So, the handler will be &lt;code&gt;reminders.check_appointments&lt;/code&gt;. I also set the timeout to 10 seconds from the default 3 seconds under Basic Settings. The script however, takes less than three seconds to complete, making this step optional.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Creating the zip file&lt;/strong&gt; - copy reminders.py and the two json files to the &lt;em&gt;site-packages&lt;/em&gt; directory. Since I used a virtual environment, the path on my laptop is &lt;code&gt;&amp;lt;Project_folder&amp;gt;/venv/Lib/site-packages&lt;/code&gt;. Now, select all the contents of your site-packages directory and zip them. Please &lt;u&gt;do not&lt;/u&gt; zip the site-packages directory itself, just the contents. Zipping the directory will result in a &lt;em&gt;Module not found&lt;/em&gt; error when running the Lambda function. Give an appropriate name to the zip file and add it to the configuration.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="lambda1" src="https://codedisciples.in/images/index3/lambda3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
Next, add a trigger to set up our &lt;strong&gt;cron&lt;/strong&gt; job. &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="lambda1" src="https://codedisciples.in/images/index3/lambda4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In the Trigger configuration, select &lt;em&gt;CloudWatch Events&lt;/em&gt;. Create a new rule with an appropriate name, specify the Rule Type as Schedule Expression and provide a cron expression. If you are new to cron, here's a link to the &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html?source=post_page---------------------------#CronExpressions"&gt;AWS cron documentation&lt;/a&gt;. The time zone specified in the cron expression on Lambda is UTC by default. So &lt;code&gt;cron(30 4 * * ? *)&lt;/code&gt; will execute our script at 4:30 AM UTC every day which is 10 AM local time for me. Make sure that the trigger is enabled and add it to the configuration. &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="lambda1" src="https://codedisciples.in/images/index3/lambda5.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
If added successfully, you will see a new CloudWatch Event added to your function configuration.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="lambda1" src="https://codedisciples.in/images/index3/lambda6.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
That's it! Now, whenever the script runs and finds an event that is due on the current day, it will send a WhatsApp message to your number.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="lambda1" src="https://codedisciples.in/images/index3/WhatsApp-final.jpg"&gt;&lt;/p&gt;</content><category term="Python"></category><category term="AWS"></category></entry><entry><title>Embedding Jupyter Notebooks in a website</title><link href="https://codedisciples.in/embedding-jupyter.html" rel="alternate"></link><published>2019-08-19T12:00:00+05:30</published><updated>2019-08-19T12:00:00+05:30</updated><author><name>Abhishek Pednekar</name></author><id>tag:codedisciples.in,2019-08-19:/embedding-jupyter.html</id><summary type="html">&lt;p&gt;Embed Jupyter Notebooks in your website using Github and NBInteract&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post, we will learn how to embed &lt;strong&gt;Jupyter Notebooks&lt;/strong&gt; in a website. The great thing about being able to embed notebooks is that either all or a subset of the notebook content, whether static or interactive can be made available directly on a website or a blog post. This is especially helpful for static sites (like &lt;strong&gt;&lt;a href="https://codedesiples.in"&gt;Code Disciples&lt;/a&gt;&lt;/strong&gt;) since the content can be added directly to the &lt;strong&gt;Markdown&lt;/strong&gt;. Readers do not need to navigate to a notebook server or a repository to explicitly view the notebook.&lt;/p&gt;
&lt;p&gt;To start off, we will create a &lt;strong&gt;&lt;a href="https://gist.github.com/"&gt;Github Gist&lt;/a&gt;&lt;/strong&gt; by uploading a &lt;strong&gt;Jupyter Notebook (.ipynb file)&lt;/strong&gt;. To keep it simple, we will be using a notebook containing some Math formulae in &lt;strong&gt;Markdown&lt;/strong&gt;. We can use a repository instead of a Gist. However, since we are dealing with just a few lines of Markdown, a Gist seems more appropriate. &lt;/p&gt;
&lt;p&gt;Once our gist is in place, we will be using a tool called &lt;em&gt;NBInteract&lt;/em&gt; to generate an &lt;strong&gt;html&lt;/strong&gt; file corresponding to our notebook. After a few modifications to the html file, we will embed the content to this blog post using an &lt;strong&gt;iframe&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Now, while I agree that there might be other ways to achieve the same results, this is what I have found to best suit my needs. So let's get started.&lt;/p&gt;
&lt;h2&gt;Creating the Gist&lt;/h2&gt;
&lt;p&gt;To create a gist, one needs to have a &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; account. Assuming you already have one, click on the &lt;em&gt;New Gist&lt;/em&gt; option on the top right of the page. &lt;/p&gt;
&lt;p&gt;Before we proceed, we will need a Jupyter Notebook to work with. The one used for this blog is available in this &lt;em&gt;&lt;a href="https://github.com/AbhishekPednekar84/codedisciples-blog-posts/tree/master/Index_2-embed-jupyter"&gt;Github repository&lt;/a&gt;&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;On the gist creation page, we will need to add a description and the notebook filename with the extension (.ipynb). To add the contents, we can simply drag and drop our notebook to the page. If there are any dependencies (third-party packages) that are needed in order for the code in our notebook to run, we will need to add those as well. Dependencies if any, will need to be added to either &lt;em&gt;requirements.txt&lt;/em&gt; (pypi) or &lt;em&gt;environment.yml&lt;/em&gt; (Conda / pypi) files. These files will also need to be added to the gist by clicking on the &lt;strong&gt;Add file&lt;/strong&gt; button. Finally, to create the gist click either of the &lt;strong&gt;Create gist&lt;/strong&gt; buttons. I will be creating a public gist.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="Gist" src="https://codedisciples.in/images/index2/gist.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Creating the iframe&lt;/h2&gt;
&lt;p&gt;To create our iframe that will eventually be embedded into the blog, we will first convert our Jupyter Notebook into an html file. This will be achieved via a third-party package called &lt;em&gt;&lt;a href="https://www.nbinteract.com/"&gt;nbinteract&lt;/a&gt;&lt;/em&gt;. So let's first create a &lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=APOPm01BVrk"&gt;virtual environment&lt;/a&gt;&lt;/em&gt; in the directory containing our notebook. &lt;/p&gt;
&lt;p&gt;Once the virtual environment is activated, let us run the &lt;code&gt;pip install nbinteract&lt;/code&gt; command to install the library.&lt;/p&gt;
&lt;p&gt;nbinteract is a command-line application (CLI). In order to use it, first navigate to the directory containing the .ipynb file and then run the below command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;nbinteract&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;notebook_filename&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipynb&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GitHub_Username&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Gist_ID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;
&lt;img alt="NBInteract" src="https://codedisciples.in/images/index2/nbinteract.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
This will create an html file with the same name as your Jupyter Notebook. Now before creating the iframe, we will need to make a couple of changes to the &lt;strong&gt;html&lt;/strong&gt; file.&lt;/p&gt;
&lt;p&gt;In the embedded JavaScript at the end of the file, change the provider from &lt;em&gt;gh&lt;/em&gt; to &lt;em&gt;gist&lt;/em&gt;. No change will be needed if you are using a GitHub Repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nv"&gt;Loads&lt;/span&gt; &lt;span class="nv"&gt;nbinteract&lt;/span&gt; &lt;span class="nv"&gt;package&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;script&lt;/span&gt; &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;https://unpkg.com/nbinteract-core&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;async&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nv"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;function&lt;/span&gt; &lt;span class="nv"&gt;setupNbinteract&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt; {
      &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="nv"&gt;NbInteract&lt;/span&gt; &lt;span class="nv"&gt;hasn&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;t loaded, wait one second and try again&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;window&lt;/span&gt;.&lt;span class="nv"&gt;NbInteract&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nv"&gt;undefined&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; {
        &lt;span class="nv"&gt;setTimeout&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;setupNbinteract&lt;/span&gt;, &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
      }

      &lt;span class="nv"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;interact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;window&lt;/span&gt;.&lt;span class="nv"&gt;NbInteract&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;{
        &lt;span class="nv"&gt;spec&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;GitHub_Username&amp;gt;/&amp;lt;Gist_ID&amp;gt;/master&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,
        &lt;span class="nv"&gt;baseUrl&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;https://mybinder.org&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;provider&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;gh&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,
        &lt;span class="nv"&gt;provider&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;gist&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;,
      }&lt;span class="ss"&gt;)&lt;/span&gt;
      &lt;span class="nv"&gt;interact&lt;/span&gt;.&lt;span class="nv"&gt;prepare&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;

      &lt;span class="nv"&gt;window&lt;/span&gt;.&lt;span class="nv"&gt;interact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;interact&lt;/span&gt;
    }&lt;span class="ss"&gt;)()&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nv"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, nbinteract inserts a whole bunch of &lt;strong&gt;Bootstrap&lt;/strong&gt; and &lt;strong&gt;Font Awesome CSS&lt;/strong&gt; in the file. So keep as much or as little of it as you need. Finally, if you would like only a subset of your notebook to be visible on the website, you can delete the unwanted cells by removing the corresponding div tags form the html file.&lt;/p&gt;
&lt;p&gt;For example, to exclude this cell,&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="delete-nb" src="https://codedisciples.in/images/index2/delete-nb.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
remove this block from the html file&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="delete-html" src="https://codedisciples.in/images/index2/delete-html.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
Now, let's embed an iframe tag in our blog, linking to the html file. I will be adding the below iframe tag directly to the Markdown corresponding to this blog. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://codedisciples.in/Index_2-Embed_Jupyter.html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just like in a Jupyter notebook, you can view the underlying code (Markdown in our case) by right-clicking on any of the formulae and viewing the plain text source. &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;iframe style="height: 500px" src="https://codedisciples.in/Index_2-Embed_Jupyter.html"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
In conclusion, I would like to say that the best use case for embedding a notebook is interactive content. If your notebook contains plots which have interactive IPython widgets, those can be embedded into your blog. Users can then interact with the plot on the website using the widgets. Some great examples have been provided in the NBInteract documentation. &lt;/p&gt;</content><category term="Python"></category><category term="Jupyter"></category></entry><entry><title>Pre-commit hooks for Python code</title><link href="https://codedisciples.in/pre-commit.html" rel="alternate"></link><published>2019-08-12T12:00:00+05:30</published><updated>2019-08-12T12:00:00+05:30</updated><author><name>Abhishek Pednekar</name></author><id>tag:codedisciples.in,2019-08-12:/pre-commit.html</id><summary type="html">&lt;p&gt;Using &lt;em&gt;black&lt;/em&gt; and &lt;em&gt;flake-8&lt;/em&gt; as pre-commit hooks in Python for code formatting and complying to PEP8 norms respectively&lt;/p&gt;</summary><content type="html">&lt;p&gt;Code reviews are great. But at the same time, they can be frustrating if the code being reviewed is not formatted uniformly. This is a common scenario in large teams wherein multiple developers are working on the same feature branch or code base. More hours spent on fixing the formatting also results in loss of productive time which could be used to further improve code logic. Also, none of us like being that super nitpicky team member who comments on a trailing whitespace or the fact that one string has single quotes while another is enclosed within double quotes. &lt;/p&gt;
&lt;p&gt;Luckily, &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;pre-commit&lt;/a&gt; hooks exist to alleviate these concerns by eliminating the need to manually review formatting and &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt; checks. A pre-commit hook is a short script that runs before committing our code. The script can be a means to check the code formatting or its compliance to PEP8. If the script runs successfully, the code is committed to source control, else the commit is unsuccessful.&lt;/p&gt;
&lt;p&gt;In this post, we’ll take a look at two popular Python libraries and how we can add them to a pre-commit hook. Please note that I am using a &lt;strong&gt;Windows&lt;/strong&gt; laptop for this demo. The same commands should work on &lt;strong&gt;macOS&lt;/strong&gt; as well.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://black.readthedocs.io/en/stable/"&gt;black&lt;/a&gt;&lt;/em&gt; - a code formatter&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="http://flake8.pycqa.org/en/latest/"&gt;flake8&lt;/a&gt;&lt;/em&gt; - a PEP8 compliance checker&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Please refer to this &lt;a href="https://github.com/AbhishekPednekar84/codedisciples-blog-posts/tree/master/Index_1-pre-commit-hooks"&gt;Github repository&lt;/a&gt; for the complete code.&lt;/p&gt;
&lt;h2&gt;Pre-commit framework&lt;/h2&gt;
&lt;p&gt;Creating a pre-commit hook is made really simple by this &lt;a href="https://github.com/pre-commit"&gt;pre-commit framework&lt;/a&gt; written in Python. To incorporate &lt;em&gt;pre-commit&lt;/em&gt; into a project, one needs to follow these steps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a &lt;a href="https://www.youtube.com/watch?v=APOPm01BVrk"&gt;virtual environment&lt;/a&gt; (optional but recommended)&lt;/li&gt;
&lt;li&gt;Install the pre-commit library: &lt;code&gt;pip install pre-commit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add the hooks (&lt;em&gt;black&lt;/em&gt; and &lt;em&gt;flake8&lt;/em&gt; in our case) to the &lt;em&gt;.pre-commit-config.yaml&lt;/em&gt; file &lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;pre-commit install&lt;/code&gt; command to install the hook in the &lt;em&gt;.git/&lt;/em&gt; directory&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is what our &lt;em&gt;.pre-commit-config.yaml&lt;/em&gt; file will look like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;   &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ambv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;
    &lt;span class="n"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;stable&lt;/span&gt;
    &lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;black&lt;/span&gt;
      &lt;span class="n"&gt;language_version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;   &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;hooks&lt;/span&gt;
    &lt;span class="n"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flake8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;pre-commit&lt;/em&gt; framework that we installed (step 2) includes &lt;em&gt;flake8&lt;/em&gt;. Hence all we need to specify is it's id. For &lt;em&gt;black&lt;/em&gt; however, we need to specify the exact path from where it needs to be sourced.&lt;/p&gt;
&lt;p&gt;In the following sections, we'll take a look at these libraries in detail.&lt;/p&gt;
&lt;h2&gt;Code formatter - &lt;em&gt;black&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;black&lt;/em&gt; is an uncompromisingly opinionated code formatter. It has been implemented with certain design decisions that are applied to the code being formatted. By adopting &lt;em&gt;black&lt;/em&gt; into your project, you are essentially letting the library take all the code formatting decisions for you. Therefore, please read through the &lt;a href="https://black.readthedocs.io/en/stable/"&gt;documentation&lt;/a&gt; to understand what the design decisions are. Below are some of the notable one's. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The number of characters per line are 88 (as opposed to 79 defined in PEP8)&lt;/li&gt;
&lt;li&gt;Strings are always enclosed in double quotes&lt;/li&gt;
&lt;li&gt;A trailing comma is added to comma separated elements&lt;/li&gt;
&lt;li&gt;For functions with multiple arguments, each argument is wrapped per line &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If any of these decisions are not acceptable to your formatting guidelines, &lt;em&gt;autopep8&lt;/em&gt; is a good alternative. Also, this is part of the &lt;em&gt;pre-commit&lt;/em&gt; framework like &lt;em&gt;flake8&lt;/em&gt;.   &lt;/p&gt;
&lt;p&gt;To use &lt;em&gt;black&lt;/em&gt;, we will need to include a &lt;em&gt;pyproject.toml&lt;/em&gt; file in our project folder. This file contains details of file types that are included and excluded during formatting. More importantly, if you would like to change the number of characters per line, just modify the &lt;code&gt;line-length&lt;/code&gt; attribute in the TOML file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[tool.black]&lt;/span&gt;
&lt;span class="c1"&gt;# Changed line-length to 80 from the default 88&lt;/span&gt;
&lt;span class="na"&gt;line-length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;80 &lt;/span&gt;
&lt;span class="na"&gt;include&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;\.pyi?$&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;exclude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;/(&lt;/span&gt;
    &lt;span class="na"&gt;\.git&lt;/span&gt;
  &lt;span class="na"&gt;| \.hg&lt;/span&gt;
  &lt;span class="na"&gt;| \.mypy_cache&lt;/span&gt;
  &lt;span class="na"&gt;| \.tox&lt;/span&gt;
  &lt;span class="na"&gt;| \.venv&lt;/span&gt;
  &lt;span class="na"&gt;| _build&lt;/span&gt;
  &lt;span class="na"&gt;| buck-out&lt;/span&gt;
  &lt;span class="na"&gt;| build&lt;/span&gt;
  &lt;span class="na"&gt;| dist&lt;/span&gt;
&lt;span class="na"&gt;)/&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;PEP8 checker - &lt;em&gt;flake8&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;flake8&lt;/em&gt; is a great library that verifies our code's compliance with PEP8. In order for &lt;em&gt;black&lt;/em&gt; to function smoothly with &lt;em&gt;flake8&lt;/em&gt;, we need to specify some &lt;a href="https://flake8.pycqa.org/en/latest/user/error-codes.html"&gt;error codes&lt;/a&gt; in the &lt;em&gt;flake8&lt;/em&gt; configuration file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[flake8]&lt;/span&gt;
&lt;span class="na"&gt;ignore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;E203, E266, E501&lt;/span&gt;
&lt;span class="na"&gt;max-line-length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;80&lt;/span&gt;
&lt;span class="na"&gt;max-complexity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;10&lt;/span&gt;
&lt;span class="na"&gt;select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;B,C,E,F,W,T4,B9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To go over this file very quickly, in the first line, we are specifying the error codes that we would like &lt;em&gt;flake8&lt;/em&gt; to ignore. The &lt;code&gt;max-line-length&lt;/code&gt; has been set to 80 to match our &lt;em&gt;black&lt;/em&gt; configuration values. &lt;code&gt;max-complexity&lt;/code&gt; defines the &lt;a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;McCabe complexity&lt;/a&gt; of a function. This is deactivated by default. The &lt;code&gt;select&lt;/code&gt; attribute enables errors and warnings which are turned off by default.&lt;/p&gt;
&lt;p&gt;That's it, with all this in place, we are ready to run the hook on our code. &lt;/p&gt;
&lt;p&gt;Here's some rather sloppily formatted code. Notice that there is no space prior to the equal to (=) operator. One element of the list uses double quotes while the rest are enclosed within single quotes and there is only one blank line prior to and after the function definition. There is also an additional whitespace on line 1 at the end of the (''') quotes.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="Unformatted-Code" src="https://codedisciples.in/images/Unformatted_Code.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
Let's create and run or hook on this code. As indicated earlier, once we &lt;code&gt;pip install&lt;/code&gt; the &lt;em&gt;pre-commit&lt;/em&gt; library, we need to install it using the &lt;code&gt;pre-commit install&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="Pre-Commit" src="https://codedisciples.in/images/Pre-Commit.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
Now, when we run our &lt;code&gt;git commit&lt;/code&gt;, we see that &lt;em&gt;black&lt;/em&gt; fails the commit but auto-formats the file. &lt;em&gt;flake8&lt;/em&gt; fails the commit due to the whitespace on line 1. This whitespace needs to be removed manually before our next &lt;code&gt;git commit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="Initial-Commit" src="https://codedisciples.in/images/Initial_Commit.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
Here's what our code looks like after all the formatting and the whitespace correction. Note that the list elements are now wrapped on separate lines. The spacing around the operators and the function definition is uniform. Also, all our strings are now enclosed within double quotes.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="Formatted-Code" src="https://codedisciples.in/images/Formatted_Code.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
Let's go ahead and commit this. If all is good, both our hooks should pass followed by a successful &lt;code&gt;git commit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;img alt="Final-Commit" src="https://codedisciples.in/images/Final_Commit.jpg"&gt;&lt;/p&gt;</content><category term="Python"></category></entry></feed>